// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: piquant-msgs.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Listing all available PIQUANT configs
// requires(READ_PIQUANT_SETTINGS)
type PiquantConfigListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PiquantConfigListReq) Reset() {
	*x = PiquantConfigListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantConfigListReq) ProtoMessage() {}

func (x *PiquantConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantConfigListReq.ProtoReflect.Descriptor instead.
func (*PiquantConfigListReq) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{0}
}

type PiquantConfigListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigNames []string `protobuf:"bytes,1,rep,name=configNames,proto3" json:"configNames,omitempty"`
}

func (x *PiquantConfigListResp) Reset() {
	*x = PiquantConfigListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantConfigListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantConfigListResp) ProtoMessage() {}

func (x *PiquantConfigListResp) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantConfigListResp.ProtoReflect.Descriptor instead.
func (*PiquantConfigListResp) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{1}
}

func (x *PiquantConfigListResp) GetConfigNames() []string {
	if x != nil {
		return x.ConfigNames
	}
	return nil
}

// Listing all available versions of a given PIQUANT config
// requires(READ_PIQUANT_SETTINGS)
type PiquantConfigVersionsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=configId,proto3" json:"configId,omitempty"`
}

func (x *PiquantConfigVersionsListReq) Reset() {
	*x = PiquantConfigVersionsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantConfigVersionsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantConfigVersionsListReq) ProtoMessage() {}

func (x *PiquantConfigVersionsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantConfigVersionsListReq.ProtoReflect.Descriptor instead.
func (*PiquantConfigVersionsListReq) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{2}
}

func (x *PiquantConfigVersionsListReq) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

type PiquantConfigVersionsListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *PiquantConfigVersionsListResp) Reset() {
	*x = PiquantConfigVersionsListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantConfigVersionsListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantConfigVersionsListResp) ProtoMessage() {}

func (x *PiquantConfigVersionsListResp) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantConfigVersionsListResp.ProtoReflect.Descriptor instead.
func (*PiquantConfigVersionsListResp) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{3}
}

func (x *PiquantConfigVersionsListResp) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

// Getting a specific PIQUANT version
// requires(READ_PIQUANT_SETTINGS)
type PiquantConfigVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=configId,proto3" json:"configId,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PiquantConfigVersionReq) Reset() {
	*x = PiquantConfigVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantConfigVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantConfigVersionReq) ProtoMessage() {}

func (x *PiquantConfigVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantConfigVersionReq.ProtoReflect.Descriptor instead.
func (*PiquantConfigVersionReq) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{4}
}

func (x *PiquantConfigVersionReq) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *PiquantConfigVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PiquantConfigVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PiquantConfig *PiquantConfig `protobuf:"bytes,1,opt,name=piquantConfig,proto3" json:"piquantConfig,omitempty"`
}

func (x *PiquantConfigVersionResp) Reset() {
	*x = PiquantConfigVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantConfigVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantConfigVersionResp) ProtoMessage() {}

func (x *PiquantConfigVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantConfigVersionResp.ProtoReflect.Descriptor instead.
func (*PiquantConfigVersionResp) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{5}
}

func (x *PiquantConfigVersionResp) GetPiquantConfig() *PiquantConfig {
	if x != nil {
		return x.PiquantConfig
	}
	return nil
}

// Listing versions of PIQUANT container to run in API when quant is started
// requires(READ_PIQUANT_SETTINGS)
type PiquantVersionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PiquantVersionListReq) Reset() {
	*x = PiquantVersionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantVersionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantVersionListReq) ProtoMessage() {}

func (x *PiquantVersionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantVersionListReq.ProtoReflect.Descriptor instead.
func (*PiquantVersionListReq) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{6}
}

type PiquantVersionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PiquantVersions []string `protobuf:"bytes,1,rep,name=piquantVersions,proto3" json:"piquantVersions,omitempty"`
}

func (x *PiquantVersionListResp) Reset() {
	*x = PiquantVersionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantVersionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantVersionListResp) ProtoMessage() {}

func (x *PiquantVersionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantVersionListResp.ProtoReflect.Descriptor instead.
func (*PiquantVersionListResp) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{7}
}

func (x *PiquantVersionListResp) GetPiquantVersions() []string {
	if x != nil {
		return x.PiquantVersions
	}
	return nil
}

// Sets the current version of PIQUANT container to run in API when quant is started
// requires(EDIT_PIQUANT_SETTINGS)
type PiquantWriteCurrentVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PiquantVersion string `protobuf:"bytes,1,opt,name=piquantVersion,proto3" json:"piquantVersion,omitempty"`
}

func (x *PiquantWriteCurrentVersionReq) Reset() {
	*x = PiquantWriteCurrentVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantWriteCurrentVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantWriteCurrentVersionReq) ProtoMessage() {}

func (x *PiquantWriteCurrentVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantWriteCurrentVersionReq.ProtoReflect.Descriptor instead.
func (*PiquantWriteCurrentVersionReq) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{8}
}

func (x *PiquantWriteCurrentVersionReq) GetPiquantVersion() string {
	if x != nil {
		return x.PiquantVersion
	}
	return ""
}

type PiquantWriteCurrentVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PiquantVersion string `protobuf:"bytes,1,opt,name=piquantVersion,proto3" json:"piquantVersion,omitempty"`
}

func (x *PiquantWriteCurrentVersionResp) Reset() {
	*x = PiquantWriteCurrentVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantWriteCurrentVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantWriteCurrentVersionResp) ProtoMessage() {}

func (x *PiquantWriteCurrentVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantWriteCurrentVersionResp.ProtoReflect.Descriptor instead.
func (*PiquantWriteCurrentVersionResp) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{9}
}

func (x *PiquantWriteCurrentVersionResp) GetPiquantVersion() string {
	if x != nil {
		return x.PiquantVersion
	}
	return ""
}

// Gets the current version of PIQUANT container that runs in API when quant is started
// requires(READ_PIQUANT_SETTINGS)
type PiquantCurrentVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PiquantCurrentVersionReq) Reset() {
	*x = PiquantCurrentVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantCurrentVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantCurrentVersionReq) ProtoMessage() {}

func (x *PiquantCurrentVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantCurrentVersionReq.ProtoReflect.Descriptor instead.
func (*PiquantCurrentVersionReq) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{10}
}

type PiquantCurrentVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PiquantVersion *PiquantVersion `protobuf:"bytes,1,opt,name=piquantVersion,proto3" json:"piquantVersion,omitempty"`
}

func (x *PiquantCurrentVersionResp) Reset() {
	*x = PiquantCurrentVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piquant_msgs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PiquantCurrentVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PiquantCurrentVersionResp) ProtoMessage() {}

func (x *PiquantCurrentVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_piquant_msgs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PiquantCurrentVersionResp.ProtoReflect.Descriptor instead.
func (*PiquantCurrentVersionResp) Descriptor() ([]byte, []int) {
	return file_piquant_msgs_proto_rawDescGZIP(), []int{11}
}

func (x *PiquantCurrentVersionResp) GetPiquantVersion() *PiquantVersion {
	if x != nil {
		return x.PiquantVersion
	}
	return nil
}

var File_piquant_msgs_proto protoreflect.FileDescriptor

var file_piquant_msgs_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x2d, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x2d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x69,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x39, 0x0a, 0x15, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3a, 0x0a,
	0x1c, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1d, 0x50, 0x69, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x18, 0x50, 0x69, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0d, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x69, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x70, 0x69, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x69, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x42, 0x0a, 0x16, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x1d, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x48, 0x0a, 0x1e, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x69, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x69, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x54, 0x0a, 0x19, 0x50, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x0e, 0x70, 0x69, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x69, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x69, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_piquant_msgs_proto_rawDescOnce sync.Once
	file_piquant_msgs_proto_rawDescData = file_piquant_msgs_proto_rawDesc
)

func file_piquant_msgs_proto_rawDescGZIP() []byte {
	file_piquant_msgs_proto_rawDescOnce.Do(func() {
		file_piquant_msgs_proto_rawDescData = protoimpl.X.CompressGZIP(file_piquant_msgs_proto_rawDescData)
	})
	return file_piquant_msgs_proto_rawDescData
}

var file_piquant_msgs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_piquant_msgs_proto_goTypes = []interface{}{
	(*PiquantConfigListReq)(nil),           // 0: PiquantConfigListReq
	(*PiquantConfigListResp)(nil),          // 1: PiquantConfigListResp
	(*PiquantConfigVersionsListReq)(nil),   // 2: PiquantConfigVersionsListReq
	(*PiquantConfigVersionsListResp)(nil),  // 3: PiquantConfigVersionsListResp
	(*PiquantConfigVersionReq)(nil),        // 4: PiquantConfigVersionReq
	(*PiquantConfigVersionResp)(nil),       // 5: PiquantConfigVersionResp
	(*PiquantVersionListReq)(nil),          // 6: PiquantVersionListReq
	(*PiquantVersionListResp)(nil),         // 7: PiquantVersionListResp
	(*PiquantWriteCurrentVersionReq)(nil),  // 8: PiquantWriteCurrentVersionReq
	(*PiquantWriteCurrentVersionResp)(nil), // 9: PiquantWriteCurrentVersionResp
	(*PiquantCurrentVersionReq)(nil),       // 10: PiquantCurrentVersionReq
	(*PiquantCurrentVersionResp)(nil),      // 11: PiquantCurrentVersionResp
	(*PiquantConfig)(nil),                  // 12: PiquantConfig
	(*PiquantVersion)(nil),                 // 13: PiquantVersion
}
var file_piquant_msgs_proto_depIdxs = []int32{
	12, // 0: PiquantConfigVersionResp.piquantConfig:type_name -> PiquantConfig
	13, // 1: PiquantCurrentVersionResp.piquantVersion:type_name -> PiquantVersion
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_piquant_msgs_proto_init() }
func file_piquant_msgs_proto_init() {
	if File_piquant_msgs_proto != nil {
		return
	}
	file_piquant_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_piquant_msgs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantConfigListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantConfigListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantConfigVersionsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantConfigVersionsListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantConfigVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantConfigVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantVersionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantVersionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantWriteCurrentVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantWriteCurrentVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantCurrentVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piquant_msgs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PiquantCurrentVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_piquant_msgs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_piquant_msgs_proto_goTypes,
		DependencyIndexes: file_piquant_msgs_proto_depIdxs,
		MessageInfos:      file_piquant_msgs_proto_msgTypes,
	}.Build()
	File_piquant_msgs_proto = out.File
	file_piquant_msgs_proto_rawDesc = nil
	file_piquant_msgs_proto_goTypes = nil
	file_piquant_msgs_proto_depIdxs = nil
}
