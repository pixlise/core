// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: viewstate.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`  
	// string scanId = 2;
	UserId         string                                `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	AnalysisLayout *AnalysisLayout                       `protobuf:"bytes,4,opt,name=analysisLayout,proto3" json:"analysisLayout,omitempty"`
	ContextImages  map[string]*ContextImageState         `protobuf:"bytes,5,rep,name=contextImages,proto3" json:"contextImages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Histograms     map[string]*HistogramState            `protobuf:"bytes,6,rep,name=histograms,proto3" json:"histograms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChordDiagrams  map[string]*ChordState                `protobuf:"bytes,7,rep,name=chordDiagrams,proto3" json:"chordDiagrams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TernaryPlots   map[string]*TernaryState              `protobuf:"bytes,8,rep,name=ternaryPlots,proto3" json:"ternaryPlots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BinaryPlots    map[string]*BinaryState               `protobuf:"bytes,9,rep,name=binaryPlots,proto3" json:"binaryPlots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tables         map[string]*TableState                `protobuf:"bytes,10,rep,name=tables,proto3" json:"tables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoiQuantTables map[string]*ROIQuantTableState        `protobuf:"bytes,11,rep,name=roiQuantTables,proto3" json:"roiQuantTables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variograms     map[string]*VariogramState            `protobuf:"bytes,12,rep,name=variograms,proto3" json:"variograms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Spectrums      map[string]*SpectrumWidgetState       `protobuf:"bytes,13,rep,name=spectrums,proto3" json:"spectrums,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RgbuPlots      map[string]*RGBUPlotWidgetState       `protobuf:"bytes,14,rep,name=rgbuPlots,proto3" json:"rgbuPlots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SingleAxisRGBU map[string]*SingleAxisRGBUWidgetState `protobuf:"bytes,15,rep,name=singleAxisRGBU,proto3" json:"singleAxisRGBU,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RgbuImages     map[string]*RGBUImagesWidgetState     `protobuf:"bytes,16,rep,name=rgbuImages,proto3" json:"rgbuImages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Parallelograms map[string]*ParallelogramWidgetState  `protobuf:"bytes,17,rep,name=parallelograms,proto3" json:"parallelograms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations    *AnnotationDisplayState               `protobuf:"bytes,18,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Not strictly the view-state of a widget, but the shared display state of ROIs
	// for the given user/dataset
	Rois           *ROIDisplayState     `protobuf:"bytes,19,opt,name=rois,proto3" json:"rois,omitempty"`
	Quantification *QuantificationState `protobuf:"bytes,20,opt,name=quantification,proto3" json:"quantification,omitempty"`
	Selection      *SelectionState      `protobuf:"bytes,21,opt,name=selection,proto3" json:"selection,omitempty"`
}

func (x *ViewState) Reset() {
	*x = ViewState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewState) ProtoMessage() {}

func (x *ViewState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewState.ProtoReflect.Descriptor instead.
func (*ViewState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{0}
}

func (x *ViewState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ViewState) GetAnalysisLayout() *AnalysisLayout {
	if x != nil {
		return x.AnalysisLayout
	}
	return nil
}

func (x *ViewState) GetContextImages() map[string]*ContextImageState {
	if x != nil {
		return x.ContextImages
	}
	return nil
}

func (x *ViewState) GetHistograms() map[string]*HistogramState {
	if x != nil {
		return x.Histograms
	}
	return nil
}

func (x *ViewState) GetChordDiagrams() map[string]*ChordState {
	if x != nil {
		return x.ChordDiagrams
	}
	return nil
}

func (x *ViewState) GetTernaryPlots() map[string]*TernaryState {
	if x != nil {
		return x.TernaryPlots
	}
	return nil
}

func (x *ViewState) GetBinaryPlots() map[string]*BinaryState {
	if x != nil {
		return x.BinaryPlots
	}
	return nil
}

func (x *ViewState) GetTables() map[string]*TableState {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ViewState) GetRoiQuantTables() map[string]*ROIQuantTableState {
	if x != nil {
		return x.RoiQuantTables
	}
	return nil
}

func (x *ViewState) GetVariograms() map[string]*VariogramState {
	if x != nil {
		return x.Variograms
	}
	return nil
}

func (x *ViewState) GetSpectrums() map[string]*SpectrumWidgetState {
	if x != nil {
		return x.Spectrums
	}
	return nil
}

func (x *ViewState) GetRgbuPlots() map[string]*RGBUPlotWidgetState {
	if x != nil {
		return x.RgbuPlots
	}
	return nil
}

func (x *ViewState) GetSingleAxisRGBU() map[string]*SingleAxisRGBUWidgetState {
	if x != nil {
		return x.SingleAxisRGBU
	}
	return nil
}

func (x *ViewState) GetRgbuImages() map[string]*RGBUImagesWidgetState {
	if x != nil {
		return x.RgbuImages
	}
	return nil
}

func (x *ViewState) GetParallelograms() map[string]*ParallelogramWidgetState {
	if x != nil {
		return x.Parallelograms
	}
	return nil
}

func (x *ViewState) GetAnnotations() *AnnotationDisplayState {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ViewState) GetRois() *ROIDisplayState {
	if x != nil {
		return x.Rois
	}
	return nil
}

func (x *ViewState) GetQuantification() *QuantificationState {
	if x != nil {
		return x.Quantification
	}
	return nil
}

func (x *ViewState) GetSelection() *SelectionState {
	if x != nil {
		return x.Selection
	}
	return nil
}

// //////////////////////////////////
// States of individual widgets
type AnalysisLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopWidgetSelectors    []string `protobuf:"bytes,1,rep,name=topWidgetSelectors,proto3" json:"topWidgetSelectors,omitempty"`
	BottomWidgetSelectors []string `protobuf:"bytes,2,rep,name=bottomWidgetSelectors,proto3" json:"bottomWidgetSelectors,omitempty"`
}

func (x *AnalysisLayout) Reset() {
	*x = AnalysisLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisLayout) ProtoMessage() {}

func (x *AnalysisLayout) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisLayout.ProtoReflect.Descriptor instead.
func (*AnalysisLayout) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{1}
}

func (x *AnalysisLayout) GetTopWidgetSelectors() []string {
	if x != nil {
		return x.TopWidgetSelectors
	}
	return nil
}

func (x *AnalysisLayout) GetBottomWidgetSelectors() []string {
	if x != nil {
		return x.BottomWidgetSelectors
	}
	return nil
}

type SpectrumXRFLineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineInfo *ElementLine `protobuf:"bytes,1,opt,name=lineInfo,proto3" json:"lineInfo,omitempty"`
	Visible  bool         `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *SpectrumXRFLineState) Reset() {
	*x = SpectrumXRFLineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumXRFLineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumXRFLineState) ProtoMessage() {}

func (x *SpectrumXRFLineState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumXRFLineState.ProtoReflect.Descriptor instead.
func (*SpectrumXRFLineState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{2}
}

func (x *SpectrumXRFLineState) GetLineInfo() *ElementLine {
	if x != nil {
		return x.LineInfo
	}
	return nil
}

func (x *SpectrumXRFLineState) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type EnergyCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detector     string  `protobuf:"bytes,1,opt,name=detector,proto3" json:"detector,omitempty"`
	EVStart      float32 `protobuf:"fixed32,2,opt,name=eVStart,proto3" json:"eVStart,omitempty"`
	EVPerChannel float32 `protobuf:"fixed32,3,opt,name=eVPerChannel,proto3" json:"eVPerChannel,omitempty"`
}

func (x *EnergyCalibration) Reset() {
	*x = EnergyCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyCalibration) ProtoMessage() {}

func (x *EnergyCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyCalibration.ProtoReflect.Descriptor instead.
func (*EnergyCalibration) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{3}
}

func (x *EnergyCalibration) GetDetector() string {
	if x != nil {
		return x.Detector
	}
	return ""
}

func (x *EnergyCalibration) GetEVStart() float32 {
	if x != nil {
		return x.EVStart
	}
	return 0
}

func (x *EnergyCalibration) GetEVPerChannel() float32 {
	if x != nil {
		return x.EVPerChannel
	}
	return 0
}

type SpectrumLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoiID           string   `protobuf:"bytes,1,opt,name=roiID,proto3" json:"roiID,omitempty"`                     // can be "dataset" or "selection" for those special cases
	LineExpressions []string `protobuf:"bytes,2,rep,name=lineExpressions,proto3" json:"lineExpressions,omitempty"` // max(A), bulk(A) or things like sum(max(A), max(B))
}

func (x *SpectrumLines) Reset() {
	*x = SpectrumLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumLines) ProtoMessage() {}

func (x *SpectrumLines) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumLines.ProtoReflect.Descriptor instead.
func (*SpectrumLines) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{4}
}

func (x *SpectrumLines) GetRoiID() string {
	if x != nil {
		return x.RoiID
	}
	return ""
}

func (x *SpectrumLines) GetLineExpressions() []string {
	if x != nil {
		return x.LineExpressions
	}
	return nil
}

type SpectrumWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanX              float32                 `protobuf:"fixed32,1,opt,name=panX,proto3" json:"panX,omitempty"`
	PanY              float32                 `protobuf:"fixed32,2,opt,name=panY,proto3" json:"panY,omitempty"`
	ZoomX             float32                 `protobuf:"fixed32,3,opt,name=zoomX,proto3" json:"zoomX,omitempty"`
	ZoomY             float32                 `protobuf:"fixed32,4,opt,name=zoomY,proto3" json:"zoomY,omitempty"`
	SpectrumLines     []*SpectrumLines        `protobuf:"bytes,5,rep,name=spectrumLines,proto3" json:"spectrumLines,omitempty"`
	LogScale          bool                    `protobuf:"varint,6,opt,name=logScale,proto3" json:"logScale,omitempty"`
	Xrflines          []*SpectrumXRFLineState `protobuf:"bytes,7,rep,name=xrflines,proto3" json:"xrflines,omitempty"`
	ShowXAsEnergy     bool                    `protobuf:"varint,8,opt,name=showXAsEnergy,proto3" json:"showXAsEnergy,omitempty"`
	EnergyCalibration []*EnergyCalibration    `protobuf:"bytes,9,rep,name=energyCalibration,proto3" json:"energyCalibration,omitempty"`
}

func (x *SpectrumWidgetState) Reset() {
	*x = SpectrumWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumWidgetState) ProtoMessage() {}

func (x *SpectrumWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumWidgetState.ProtoReflect.Descriptor instead.
func (*SpectrumWidgetState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{5}
}

func (x *SpectrumWidgetState) GetPanX() float32 {
	if x != nil {
		return x.PanX
	}
	return 0
}

func (x *SpectrumWidgetState) GetPanY() float32 {
	if x != nil {
		return x.PanY
	}
	return 0
}

func (x *SpectrumWidgetState) GetZoomX() float32 {
	if x != nil {
		return x.ZoomX
	}
	return 0
}

func (x *SpectrumWidgetState) GetZoomY() float32 {
	if x != nil {
		return x.ZoomY
	}
	return 0
}

func (x *SpectrumWidgetState) GetSpectrumLines() []*SpectrumLines {
	if x != nil {
		return x.SpectrumLines
	}
	return nil
}

func (x *SpectrumWidgetState) GetLogScale() bool {
	if x != nil {
		return x.LogScale
	}
	return false
}

func (x *SpectrumWidgetState) GetXrflines() []*SpectrumXRFLineState {
	if x != nil {
		return x.Xrflines
	}
	return nil
}

func (x *SpectrumWidgetState) GetShowXAsEnergy() bool {
	if x != nil {
		return x.ShowXAsEnergy
	}
	return false
}

func (x *SpectrumWidgetState) GetEnergyCalibration() []*EnergyCalibration {
	if x != nil {
		return x.EnergyCalibration
	}
	return nil
}

type HistogramState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowStdDeviation bool     `protobuf:"varint,1,opt,name=showStdDeviation,proto3" json:"showStdDeviation,omitempty"`
	LogScale         bool     `protobuf:"varint,2,opt,name=logScale,proto3" json:"logScale,omitempty"`
	ExpressionIDs    []string `protobuf:"bytes,3,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs      []string `protobuf:"bytes,4,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
}

func (x *HistogramState) Reset() {
	*x = HistogramState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramState) ProtoMessage() {}

func (x *HistogramState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramState.ProtoReflect.Descriptor instead.
func (*HistogramState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{6}
}

func (x *HistogramState) GetShowStdDeviation() bool {
	if x != nil {
		return x.ShowStdDeviation
	}
	return false
}

func (x *HistogramState) GetLogScale() bool {
	if x != nil {
		return x.LogScale
	}
	return false
}

func (x *HistogramState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *HistogramState) GetVisibleROIs() []string {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

type QuantificationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppliedQuantID string `protobuf:"bytes,1,opt,name=appliedQuantID,proto3" json:"appliedQuantID,omitempty"`
}

func (x *QuantificationState) Reset() {
	*x = QuantificationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantificationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantificationState) ProtoMessage() {}

func (x *QuantificationState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantificationState.ProtoReflect.Descriptor instead.
func (*QuantificationState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{7}
}

func (x *QuantificationState) GetAppliedQuantID() string {
	if x != nil {
		return x.AppliedQuantID
	}
	return ""
}

type SelectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PMC selection world
	RoiID   string  `protobuf:"bytes,1,opt,name=roiID,proto3" json:"roiID,omitempty"`
	RoiName string  `protobuf:"bytes,2,opt,name=roiName,proto3" json:"roiName,omitempty"`
	LocIdxs []int32 `protobuf:"varint,3,rep,packed,name=locIdxs,proto3" json:"locIdxs,omitempty"`
	// PIXEL selection world (Added for RGBU)
	PixelSelectionImageName string  `protobuf:"bytes,4,opt,name=pixelSelectionImageName,proto3" json:"pixelSelectionImageName,omitempty"`
	PixelIdxs               []int32 `protobuf:"varint,5,rep,packed,name=pixelIdxs,proto3" json:"pixelIdxs,omitempty"`
	CropPixelIdxs           []int32 `protobuf:"varint,6,rep,packed,name=cropPixelIdxs,proto3" json:"cropPixelIdxs,omitempty"`
}

func (x *SelectionState) Reset() {
	*x = SelectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionState) ProtoMessage() {}

func (x *SelectionState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionState.ProtoReflect.Descriptor instead.
func (*SelectionState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{8}
}

func (x *SelectionState) GetRoiID() string {
	if x != nil {
		return x.RoiID
	}
	return ""
}

func (x *SelectionState) GetRoiName() string {
	if x != nil {
		return x.RoiName
	}
	return ""
}

func (x *SelectionState) GetLocIdxs() []int32 {
	if x != nil {
		return x.LocIdxs
	}
	return nil
}

func (x *SelectionState) GetPixelSelectionImageName() string {
	if x != nil {
		return x.PixelSelectionImageName
	}
	return ""
}

func (x *SelectionState) GetPixelIdxs() []int32 {
	if x != nil {
		return x.PixelIdxs
	}
	return nil
}

func (x *SelectionState) GetCropPixelIdxs() []int32 {
	if x != nil {
		return x.CropPixelIdxs
	}
	return nil
}

type ChordState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowForSelection bool     `protobuf:"varint,1,opt,name=showForSelection,proto3" json:"showForSelection,omitempty"`
	ExpressionIDs    []string `protobuf:"bytes,2,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	DisplayROI       string   `protobuf:"bytes,3,opt,name=displayROI,proto3" json:"displayROI,omitempty"`
	Threshold        float32  `protobuf:"fixed32,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	DrawMode         string   `protobuf:"bytes,5,opt,name=drawMode,proto3" json:"drawMode,omitempty"`
}

func (x *ChordState) Reset() {
	*x = ChordState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChordState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChordState) ProtoMessage() {}

func (x *ChordState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChordState.ProtoReflect.Descriptor instead.
func (*ChordState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{9}
}

func (x *ChordState) GetShowForSelection() bool {
	if x != nil {
		return x.ShowForSelection
	}
	return false
}

func (x *ChordState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *ChordState) GetDisplayROI() string {
	if x != nil {
		return x.DisplayROI
	}
	return ""
}

func (x *ChordState) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ChordState) GetDrawMode() string {
	if x != nil {
		return x.DrawMode
	}
	return ""
}

type BinaryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowMmol      bool     `protobuf:"varint,1,opt,name=showMmol,proto3" json:"showMmol,omitempty"`
	ExpressionIDs []string `protobuf:"bytes,2,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs   []string `protobuf:"bytes,3,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
}

func (x *BinaryState) Reset() {
	*x = BinaryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryState) ProtoMessage() {}

func (x *BinaryState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryState.ProtoReflect.Descriptor instead.
func (*BinaryState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{10}
}

func (x *BinaryState) GetShowMmol() bool {
	if x != nil {
		return x.ShowMmol
	}
	return false
}

func (x *BinaryState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *BinaryState) GetVisibleROIs() []string {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

type TernaryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowMmol      bool     `protobuf:"varint,1,opt,name=showMmol,proto3" json:"showMmol,omitempty"`
	ExpressionIDs []string `protobuf:"bytes,2,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs   []string `protobuf:"bytes,3,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
}

func (x *TernaryState) Reset() {
	*x = TernaryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TernaryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TernaryState) ProtoMessage() {}

func (x *TernaryState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TernaryState.ProtoReflect.Descriptor instead.
func (*TernaryState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{11}
}

func (x *TernaryState) GetShowMmol() bool {
	if x != nil {
		return x.ShowMmol
	}
	return false
}

func (x *TernaryState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *TernaryState) GetVisibleROIs() []string {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

type TableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowPureElements bool     `protobuf:"varint,1,opt,name=showPureElements,proto3" json:"showPureElements,omitempty"`
	Order            string   `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	VisibleROIs      []string `protobuf:"bytes,3,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
}

func (x *TableState) Reset() {
	*x = TableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableState) ProtoMessage() {}

func (x *TableState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableState.ProtoReflect.Descriptor instead.
func (*TableState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{12}
}

func (x *TableState) GetShowPureElements() bool {
	if x != nil {
		return x.ShowPureElements
	}
	return false
}

func (x *TableState) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *TableState) GetVisibleROIs() []string {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

type ROIQuantTableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roi      string   `protobuf:"bytes,1,opt,name=roi,proto3" json:"roi,omitempty"`
	QuantIDs []string `protobuf:"bytes,2,rep,name=quantIDs,proto3" json:"quantIDs,omitempty"`
}

func (x *ROIQuantTableState) Reset() {
	*x = ROIQuantTableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROIQuantTableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIQuantTableState) ProtoMessage() {}

func (x *ROIQuantTableState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIQuantTableState.ProtoReflect.Descriptor instead.
func (*ROIQuantTableState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{13}
}

func (x *ROIQuantTableState) GetRoi() string {
	if x != nil {
		return x.Roi
	}
	return ""
}

func (x *ROIQuantTableState) GetQuantIDs() []string {
	if x != nil {
		return x.QuantIDs
	}
	return nil
}

type VariogramState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionIDs  []string `protobuf:"bytes,1,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs    []string `protobuf:"bytes,2,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
	VarioModel     string   `protobuf:"bytes,3,opt,name=varioModel,proto3" json:"varioModel,omitempty"` // valid: "exponential", "spherical", "gaussian"
	MaxDistance    float32  `protobuf:"fixed32,4,opt,name=maxDistance,proto3" json:"maxDistance,omitempty"`
	BinCount       int32    `protobuf:"varint,5,opt,name=binCount,proto3" json:"binCount,omitempty"`
	DrawModeVector bool     `protobuf:"varint,6,opt,name=drawModeVector,proto3" json:"drawModeVector,omitempty"` // vector or isotropic
}

func (x *VariogramState) Reset() {
	*x = VariogramState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariogramState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariogramState) ProtoMessage() {}

func (x *VariogramState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariogramState.ProtoReflect.Descriptor instead.
func (*VariogramState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{14}
}

func (x *VariogramState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *VariogramState) GetVisibleROIs() []string {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

func (x *VariogramState) GetVarioModel() string {
	if x != nil {
		return x.VarioModel
	}
	return ""
}

func (x *VariogramState) GetMaxDistance() float32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *VariogramState) GetBinCount() int32 {
	if x != nil {
		return x.BinCount
	}
	return 0
}

func (x *VariogramState) GetDrawModeVector() bool {
	if x != nil {
		return x.DrawModeVector
	}
	return false
}

type MapLayerVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionID         string  `protobuf:"bytes,1,opt,name=expressionID,proto3" json:"expressionID,omitempty"`
	Opacity              float32 `protobuf:"fixed32,2,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Visible              bool    `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
	DisplayValueRangeMin float32 `protobuf:"fixed32,4,opt,name=displayValueRangeMin,proto3" json:"displayValueRangeMin,omitempty"`
	DisplayValueRangeMax float32 `protobuf:"fixed32,5,opt,name=displayValueRangeMax,proto3" json:"displayValueRangeMax,omitempty"`
	DisplayValueShading  string  `protobuf:"bytes,6,opt,name=displayValueShading,proto3" json:"displayValueShading,omitempty"`
}

func (x *MapLayerVisibility) Reset() {
	*x = MapLayerVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLayerVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLayerVisibility) ProtoMessage() {}

func (x *MapLayerVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLayerVisibility.ProtoReflect.Descriptor instead.
func (*MapLayerVisibility) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{15}
}

func (x *MapLayerVisibility) GetExpressionID() string {
	if x != nil {
		return x.ExpressionID
	}
	return ""
}

func (x *MapLayerVisibility) GetOpacity() float32 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *MapLayerVisibility) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *MapLayerVisibility) GetDisplayValueRangeMin() float32 {
	if x != nil {
		return x.DisplayValueRangeMin
	}
	return 0
}

func (x *MapLayerVisibility) GetDisplayValueRangeMax() float32 {
	if x != nil {
		return x.DisplayValueRangeMax
	}
	return 0
}

func (x *MapLayerVisibility) GetDisplayValueShading() string {
	if x != nil {
		return x.DisplayValueShading
	}
	return ""
}

type ROILayerVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoiID   string  `protobuf:"bytes,1,opt,name=roiID,proto3" json:"roiID,omitempty"`
	Opacity float32 `protobuf:"fixed32,2,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Visible bool    `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *ROILayerVisibility) Reset() {
	*x = ROILayerVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROILayerVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROILayerVisibility) ProtoMessage() {}

func (x *ROILayerVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROILayerVisibility.ProtoReflect.Descriptor instead.
func (*ROILayerVisibility) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{16}
}

func (x *ROILayerVisibility) GetRoiID() string {
	if x != nil {
		return x.RoiID
	}
	return ""
}

func (x *ROILayerVisibility) GetOpacity() float32 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *ROILayerVisibility) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type ContextImageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanX                          float32               `protobuf:"fixed32,1,opt,name=panX,proto3" json:"panX,omitempty"`
	PanY                          float32               `protobuf:"fixed32,2,opt,name=panY,proto3" json:"panY,omitempty"`
	ZoomX                         float32               `protobuf:"fixed32,3,opt,name=zoomX,proto3" json:"zoomX,omitempty"`
	ZoomY                         float32               `protobuf:"fixed32,4,opt,name=zoomY,proto3" json:"zoomY,omitempty"`
	ShowPoints                    bool                  `protobuf:"varint,5,opt,name=showPoints,proto3" json:"showPoints,omitempty"`
	ShowPointBBox                 bool                  `protobuf:"varint,6,opt,name=showPointBBox,proto3" json:"showPointBBox,omitempty"`
	PointColourScheme             string                `protobuf:"bytes,7,opt,name=pointColourScheme,proto3" json:"pointColourScheme,omitempty"`
	PointBBoxColourScheme         string                `protobuf:"bytes,8,opt,name=pointBBoxColourScheme,proto3" json:"pointBBoxColourScheme,omitempty"`
	ContextImage                  string                `protobuf:"bytes,9,opt,name=contextImage,proto3" json:"contextImage,omitempty"`
	ContextImageSmoothing         string                `protobuf:"bytes,10,opt,name=contextImageSmoothing,proto3" json:"contextImageSmoothing,omitempty"`
	MapLayers                     []*MapLayerVisibility `protobuf:"bytes,11,rep,name=mapLayers,proto3" json:"mapLayers,omitempty"`
	RoiLayers                     []*ROILayerVisibility `protobuf:"bytes,12,rep,name=roiLayers,proto3" json:"roiLayers,omitempty"`
	ElementRelativeShading        bool                  `protobuf:"varint,13,opt,name=elementRelativeShading,proto3" json:"elementRelativeShading,omitempty"`
	Brightness                    float32               `protobuf:"fixed32,14,opt,name=brightness,proto3" json:"brightness,omitempty"`
	RgbuChannels                  string                `protobuf:"bytes,15,opt,name=rgbuChannels,proto3" json:"rgbuChannels,omitempty"`
	UnselectedOpacity             float32               `protobuf:"fixed32,16,opt,name=unselectedOpacity,proto3" json:"unselectedOpacity,omitempty"`
	UnselectedGrayscale           bool                  `protobuf:"varint,17,opt,name=unselectedGrayscale,proto3" json:"unselectedGrayscale,omitempty"`
	ColourRatioMin                float32               `protobuf:"fixed32,18,opt,name=colourRatioMin,proto3" json:"colourRatioMin,omitempty"`
	ColourRatioMax                float32               `protobuf:"fixed32,19,opt,name=colourRatioMax,proto3" json:"colourRatioMax,omitempty"`
	RemoveTopSpecularArtifacts    bool                  `protobuf:"varint,20,opt,name=removeTopSpecularArtifacts,proto3" json:"removeTopSpecularArtifacts,omitempty"`
	RemoveBottomSpecularArtifacts bool                  `protobuf:"varint,21,opt,name=removeBottomSpecularArtifacts,proto3" json:"removeBottomSpecularArtifacts,omitempty"`
}

func (x *ContextImageState) Reset() {
	*x = ContextImageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextImageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextImageState) ProtoMessage() {}

func (x *ContextImageState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextImageState.ProtoReflect.Descriptor instead.
func (*ContextImageState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{17}
}

func (x *ContextImageState) GetPanX() float32 {
	if x != nil {
		return x.PanX
	}
	return 0
}

func (x *ContextImageState) GetPanY() float32 {
	if x != nil {
		return x.PanY
	}
	return 0
}

func (x *ContextImageState) GetZoomX() float32 {
	if x != nil {
		return x.ZoomX
	}
	return 0
}

func (x *ContextImageState) GetZoomY() float32 {
	if x != nil {
		return x.ZoomY
	}
	return 0
}

func (x *ContextImageState) GetShowPoints() bool {
	if x != nil {
		return x.ShowPoints
	}
	return false
}

func (x *ContextImageState) GetShowPointBBox() bool {
	if x != nil {
		return x.ShowPointBBox
	}
	return false
}

func (x *ContextImageState) GetPointColourScheme() string {
	if x != nil {
		return x.PointColourScheme
	}
	return ""
}

func (x *ContextImageState) GetPointBBoxColourScheme() string {
	if x != nil {
		return x.PointBBoxColourScheme
	}
	return ""
}

func (x *ContextImageState) GetContextImage() string {
	if x != nil {
		return x.ContextImage
	}
	return ""
}

func (x *ContextImageState) GetContextImageSmoothing() string {
	if x != nil {
		return x.ContextImageSmoothing
	}
	return ""
}

func (x *ContextImageState) GetMapLayers() []*MapLayerVisibility {
	if x != nil {
		return x.MapLayers
	}
	return nil
}

func (x *ContextImageState) GetRoiLayers() []*ROILayerVisibility {
	if x != nil {
		return x.RoiLayers
	}
	return nil
}

func (x *ContextImageState) GetElementRelativeShading() bool {
	if x != nil {
		return x.ElementRelativeShading
	}
	return false
}

func (x *ContextImageState) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *ContextImageState) GetRgbuChannels() string {
	if x != nil {
		return x.RgbuChannels
	}
	return ""
}

func (x *ContextImageState) GetUnselectedOpacity() float32 {
	if x != nil {
		return x.UnselectedOpacity
	}
	return 0
}

func (x *ContextImageState) GetUnselectedGrayscale() bool {
	if x != nil {
		return x.UnselectedGrayscale
	}
	return false
}

func (x *ContextImageState) GetColourRatioMin() float32 {
	if x != nil {
		return x.ColourRatioMin
	}
	return 0
}

func (x *ContextImageState) GetColourRatioMax() float32 {
	if x != nil {
		return x.ColourRatioMax
	}
	return 0
}

func (x *ContextImageState) GetRemoveTopSpecularArtifacts() bool {
	if x != nil {
		return x.RemoveTopSpecularArtifacts
	}
	return false
}

func (x *ContextImageState) GetRemoveBottomSpecularArtifacts() bool {
	if x != nil {
		return x.RemoveBottomSpecularArtifacts
	}
	return false
}

type AnnotationPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X            float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y            float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	ScreenWidth  float32 `protobuf:"fixed32,3,opt,name=screenWidth,proto3" json:"screenWidth,omitempty"`
	ScreenHeight float32 `protobuf:"fixed32,4,opt,name=screenHeight,proto3" json:"screenHeight,omitempty"`
}

func (x *AnnotationPoint) Reset() {
	*x = AnnotationPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationPoint) ProtoMessage() {}

func (x *AnnotationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationPoint.ProtoReflect.Descriptor instead.
func (*AnnotationPoint) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{18}
}

func (x *AnnotationPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *AnnotationPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *AnnotationPoint) GetScreenWidth() float32 {
	if x != nil {
		return x.ScreenWidth
	}
	return 0
}

func (x *AnnotationPoint) GetScreenHeight() float32 {
	if x != nil {
		return x.ScreenHeight
	}
	return 0
}

type FullScreenAnnotationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Points   []*AnnotationPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	Colour   string             `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
	Complete bool               `protobuf:"varint,4,opt,name=complete,proto3" json:"complete,omitempty"`
	Text     string             `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	FontSize int32              `protobuf:"varint,6,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Id       int32              `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FullScreenAnnotationItem) Reset() {
	*x = FullScreenAnnotationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullScreenAnnotationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullScreenAnnotationItem) ProtoMessage() {}

func (x *FullScreenAnnotationItem) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullScreenAnnotationItem.ProtoReflect.Descriptor instead.
func (*FullScreenAnnotationItem) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{19}
}

func (x *FullScreenAnnotationItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FullScreenAnnotationItem) GetPoints() []*AnnotationPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *FullScreenAnnotationItem) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *FullScreenAnnotationItem) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *FullScreenAnnotationItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FullScreenAnnotationItem) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *FullScreenAnnotationItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AnnotationDisplayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedAnnotations []*FullScreenAnnotationItem `protobuf:"bytes,1,rep,name=savedAnnotations,proto3" json:"savedAnnotations,omitempty"`
}

func (x *AnnotationDisplayState) Reset() {
	*x = AnnotationDisplayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationDisplayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationDisplayState) ProtoMessage() {}

func (x *AnnotationDisplayState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationDisplayState.ProtoReflect.Descriptor instead.
func (*AnnotationDisplayState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{20}
}

func (x *AnnotationDisplayState) GetSavedAnnotations() []*FullScreenAnnotationItem {
	if x != nil {
		return x.SavedAnnotations
	}
	return nil
}

type ROIDisplayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoiColours map[string]string `protobuf:"bytes,1,rep,name=roiColours,proto3" json:"roiColours,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoiShapes  map[string]string `protobuf:"bytes,2,rep,name=roiShapes,proto3" json:"roiShapes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ROIDisplayState) Reset() {
	*x = ROIDisplayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROIDisplayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIDisplayState) ProtoMessage() {}

func (x *ROIDisplayState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIDisplayState.ProtoReflect.Descriptor instead.
func (*ROIDisplayState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{21}
}

func (x *ROIDisplayState) GetRoiColours() map[string]string {
	if x != nil {
		return x.RoiColours
	}
	return nil
}

func (x *ROIDisplayState) GetRoiShapes() map[string]string {
	if x != nil {
		return x.RoiShapes
	}
	return nil
}

type RGBUPlotWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minerals          []string `protobuf:"bytes,1,rep,name=minerals,proto3" json:"minerals,omitempty"`
	YChannelA         string   `protobuf:"bytes,2,opt,name=yChannelA,proto3" json:"yChannelA,omitempty"`
	YChannelB         string   `protobuf:"bytes,3,opt,name=yChannelB,proto3" json:"yChannelB,omitempty"`
	XChannelA         string   `protobuf:"bytes,4,opt,name=xChannelA,proto3" json:"xChannelA,omitempty"`
	XChannelB         string   `protobuf:"bytes,5,opt,name=xChannelB,proto3" json:"xChannelB,omitempty"`
	DrawMonochrome    bool     `protobuf:"varint,6,opt,name=drawMonochrome,proto3" json:"drawMonochrome,omitempty"`
	SelectedMinXValue float32  `protobuf:"fixed32,7,opt,name=selectedMinXValue,proto3" json:"selectedMinXValue,omitempty"`
	SelectedMaxXValue float32  `protobuf:"fixed32,8,opt,name=selectedMaxXValue,proto3" json:"selectedMaxXValue,omitempty"`
	SelectedMinYValue float32  `protobuf:"fixed32,9,opt,name=selectedMinYValue,proto3" json:"selectedMinYValue,omitempty"`
	SelectedMaxYValue float32  `protobuf:"fixed32,10,opt,name=selectedMaxYValue,proto3" json:"selectedMaxYValue,omitempty"`
}

func (x *RGBUPlotWidgetState) Reset() {
	*x = RGBUPlotWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBUPlotWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBUPlotWidgetState) ProtoMessage() {}

func (x *RGBUPlotWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBUPlotWidgetState.ProtoReflect.Descriptor instead.
func (*RGBUPlotWidgetState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{22}
}

func (x *RGBUPlotWidgetState) GetMinerals() []string {
	if x != nil {
		return x.Minerals
	}
	return nil
}

func (x *RGBUPlotWidgetState) GetYChannelA() string {
	if x != nil {
		return x.YChannelA
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetYChannelB() string {
	if x != nil {
		return x.YChannelB
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetXChannelA() string {
	if x != nil {
		return x.XChannelA
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetXChannelB() string {
	if x != nil {
		return x.XChannelB
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetDrawMonochrome() bool {
	if x != nil {
		return x.DrawMonochrome
	}
	return false
}

func (x *RGBUPlotWidgetState) GetSelectedMinXValue() float32 {
	if x != nil {
		return x.SelectedMinXValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetSelectedMaxXValue() float32 {
	if x != nil {
		return x.SelectedMaxXValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetSelectedMinYValue() float32 {
	if x != nil {
		return x.SelectedMinYValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetSelectedMaxYValue() float32 {
	if x != nil {
		return x.SelectedMaxYValue
	}
	return 0
}

type SingleAxisRGBUWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minerals          []string `protobuf:"bytes,1,rep,name=minerals,proto3" json:"minerals,omitempty"`
	ChannelA          string   `protobuf:"bytes,2,opt,name=channelA,proto3" json:"channelA,omitempty"`
	ChannelB          string   `protobuf:"bytes,3,opt,name=channelB,proto3" json:"channelB,omitempty"`
	RoiStackedOverlap bool     `protobuf:"varint,4,opt,name=roiStackedOverlap,proto3" json:"roiStackedOverlap,omitempty"`
}

func (x *SingleAxisRGBUWidgetState) Reset() {
	*x = SingleAxisRGBUWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAxisRGBUWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAxisRGBUWidgetState) ProtoMessage() {}

func (x *SingleAxisRGBUWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAxisRGBUWidgetState.ProtoReflect.Descriptor instead.
func (*SingleAxisRGBUWidgetState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{23}
}

func (x *SingleAxisRGBUWidgetState) GetMinerals() []string {
	if x != nil {
		return x.Minerals
	}
	return nil
}

func (x *SingleAxisRGBUWidgetState) GetChannelA() string {
	if x != nil {
		return x.ChannelA
	}
	return ""
}

func (x *SingleAxisRGBUWidgetState) GetChannelB() string {
	if x != nil {
		return x.ChannelB
	}
	return ""
}

func (x *SingleAxisRGBUWidgetState) GetRoiStackedOverlap() bool {
	if x != nil {
		return x.RoiStackedOverlap
	}
	return false
}

type RGBUImagesWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogColour  bool    `protobuf:"varint,1,opt,name=logColour,proto3" json:"logColour,omitempty"`
	Brightness float32 `protobuf:"fixed32,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
}

func (x *RGBUImagesWidgetState) Reset() {
	*x = RGBUImagesWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBUImagesWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBUImagesWidgetState) ProtoMessage() {}

func (x *RGBUImagesWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBUImagesWidgetState.ProtoReflect.Descriptor instead.
func (*RGBUImagesWidgetState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{24}
}

func (x *RGBUImagesWidgetState) GetLogColour() bool {
	if x != nil {
		return x.LogColour
	}
	return false
}

func (x *RGBUImagesWidgetState) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

type ParallelogramWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions  []string `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
	Channels []string `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ParallelogramWidgetState) Reset() {
	*x = ParallelogramWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_viewstate_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelogramWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelogramWidgetState) ProtoMessage() {}

func (x *ParallelogramWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_viewstate_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelogramWidgetState.ProtoReflect.Descriptor instead.
func (*ParallelogramWidgetState) Descriptor() ([]byte, []int) {
	return file_viewstate_proto_rawDescGZIP(), []int{25}
}

func (x *ParallelogramWidgetState) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *ParallelogramWidgetState) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

var File_viewstate_proto protoreflect.FileDescriptor

var file_viewstate_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x11, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x72,
	0x64, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6e,
	0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x6f,
	0x69, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52,
	0x6f, 0x69, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x72, 0x6f, 0x69, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x67, 0x62, 0x75, 0x50,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x67, 0x62, 0x75, 0x50, 0x6c, 0x6f, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x67, 0x62, 0x75, 0x50, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x46, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52, 0x47,
	0x42, 0x55, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52,
	0x47, 0x42, 0x55, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x41, 0x78, 0x69, 0x73, 0x52, 0x47, 0x42, 0x55, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x67, 0x62, 0x75,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x67, 0x62, 0x75, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x67, 0x62, 0x75, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x69, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x4f, 0x49, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x69, 0x73, 0x12, 0x3c, 0x0a,
	0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x54, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4e, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4d, 0x0a, 0x12, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4e, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4c, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a,
	0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x13, 0x52, 0x6f, 0x69, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x52, 0x4f, 0x49, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a,
	0x0f, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a,
	0x0e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x52, 0x0a, 0x0e, 0x52, 0x67, 0x62, 0x75, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x47, 0x42, 0x55, 0x50, 0x6c, 0x6f, 0x74, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41,
	0x78, 0x69, 0x73, 0x52, 0x47, 0x42, 0x55, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52, 0x47, 0x42, 0x55, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x52, 0x67, 0x62, 0x75, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x47, 0x42, 0x55, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x13, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x6f, 0x70, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0x5a, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x58, 0x52, 0x46,
	0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x6d, 0x0a,
	0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x56, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x65, 0x56, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x56, 0x50, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x65, 0x56, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x4f, 0x0a, 0x0d,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x69, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x69, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd6, 0x02,
	0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x6e, 0x58, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x6e, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x6e,
	0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x6e, 0x59, 0x12, 0x14, 0x0a,
	0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x7a, 0x6f,
	0x6f, 0x6d, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x59, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x59, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x78,
	0x72, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x58, 0x52, 0x46, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x78, 0x72, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x58, 0x41, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x58, 0x41, 0x73, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x22, 0x3d, 0x0a, 0x13, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x69, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x69, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x63, 0x49, 0x64, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x49, 0x64, 0x78, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x49, 0x64, 0x78, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x49, 0x64, 0x78, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x72, 0x6f, 0x70, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x49, 0x64, 0x78, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x70, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x49,
	0x64, 0x78, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x77, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x4f, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x4f, 0x49, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x71,
	0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49,
	0x73, 0x22, 0x72, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f,
	0x49, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x52, 0x4f, 0x49, 0x73, 0x22, 0x70, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x75, 0x72, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x77, 0x50, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x4f, 0x49, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x4f, 0x49, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x6f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x69, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0e,
	0x56, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x4f, 0x49, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x72,
	0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x86, 0x02, 0x0a,
	0x12, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x4f, 0x49, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x69, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x69, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x83, 0x07, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x6e, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x6e, 0x58, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x6e, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70,
	0x61, 0x6e, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x58, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f,
	0x6d, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x59, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x42, 0x6f, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x42, 0x6f, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x42, 0x6f, 0x78,
	0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6c,
	0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x6f,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x69, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x4f, 0x49, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09,
	0x72, 0x6f, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x67, 0x62, 0x75, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x67, 0x62, 0x75, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x79,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x0f, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xcc, 0x01, 0x0a, 0x18, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x5f, 0x0a, 0x16, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x52, 0x4f, 0x49, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x6f, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x4f, 0x49, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x69, 0x43, 0x6f,
	0x6c, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x69, 0x43,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x6f, 0x69, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x4f, 0x49, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x69, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x69, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x6f, 0x69, 0x43, 0x6f, 0x6c, 0x6f,
	0x75, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x6f, 0x69, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x89, 0x03, 0x0a, 0x13, 0x52, 0x47, 0x42, 0x55, 0x50, 0x6c, 0x6f, 0x74, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x12, 0x1c, 0x0a, 0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x6f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x6f,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x58, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x58, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x59,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52, 0x47, 0x42,
	0x55, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x6f, 0x69,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x22, 0x55,
	0x0a, 0x15, 0x52, 0x47, 0x42, 0x55, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x43, 0x6f,
	0x6c, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x43,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_viewstate_proto_rawDescOnce sync.Once
	file_viewstate_proto_rawDescData = file_viewstate_proto_rawDesc
)

func file_viewstate_proto_rawDescGZIP() []byte {
	file_viewstate_proto_rawDescOnce.Do(func() {
		file_viewstate_proto_rawDescData = protoimpl.X.CompressGZIP(file_viewstate_proto_rawDescData)
	})
	return file_viewstate_proto_rawDescData
}

var file_viewstate_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_viewstate_proto_goTypes = []interface{}{
	(*ViewState)(nil),                 // 0: ViewState
	(*AnalysisLayout)(nil),            // 1: AnalysisLayout
	(*SpectrumXRFLineState)(nil),      // 2: SpectrumXRFLineState
	(*EnergyCalibration)(nil),         // 3: EnergyCalibration
	(*SpectrumLines)(nil),             // 4: SpectrumLines
	(*SpectrumWidgetState)(nil),       // 5: SpectrumWidgetState
	(*HistogramState)(nil),            // 6: HistogramState
	(*QuantificationState)(nil),       // 7: QuantificationState
	(*SelectionState)(nil),            // 8: SelectionState
	(*ChordState)(nil),                // 9: ChordState
	(*BinaryState)(nil),               // 10: BinaryState
	(*TernaryState)(nil),              // 11: TernaryState
	(*TableState)(nil),                // 12: TableState
	(*ROIQuantTableState)(nil),        // 13: ROIQuantTableState
	(*VariogramState)(nil),            // 14: VariogramState
	(*MapLayerVisibility)(nil),        // 15: MapLayerVisibility
	(*ROILayerVisibility)(nil),        // 16: ROILayerVisibility
	(*ContextImageState)(nil),         // 17: ContextImageState
	(*AnnotationPoint)(nil),           // 18: AnnotationPoint
	(*FullScreenAnnotationItem)(nil),  // 19: FullScreenAnnotationItem
	(*AnnotationDisplayState)(nil),    // 20: AnnotationDisplayState
	(*ROIDisplayState)(nil),           // 21: ROIDisplayState
	(*RGBUPlotWidgetState)(nil),       // 22: RGBUPlotWidgetState
	(*SingleAxisRGBUWidgetState)(nil), // 23: SingleAxisRGBUWidgetState
	(*RGBUImagesWidgetState)(nil),     // 24: RGBUImagesWidgetState
	(*ParallelogramWidgetState)(nil),  // 25: ParallelogramWidgetState
	nil,                               // 26: ViewState.ContextImagesEntry
	nil,                               // 27: ViewState.HistogramsEntry
	nil,                               // 28: ViewState.ChordDiagramsEntry
	nil,                               // 29: ViewState.TernaryPlotsEntry
	nil,                               // 30: ViewState.BinaryPlotsEntry
	nil,                               // 31: ViewState.TablesEntry
	nil,                               // 32: ViewState.RoiQuantTablesEntry
	nil,                               // 33: ViewState.VariogramsEntry
	nil,                               // 34: ViewState.SpectrumsEntry
	nil,                               // 35: ViewState.RgbuPlotsEntry
	nil,                               // 36: ViewState.SingleAxisRGBUEntry
	nil,                               // 37: ViewState.RgbuImagesEntry
	nil,                               // 38: ViewState.ParallelogramsEntry
	nil,                               // 39: ROIDisplayState.RoiColoursEntry
	nil,                               // 40: ROIDisplayState.RoiShapesEntry
	(*ElementLine)(nil),               // 41: ElementLine
}
var file_viewstate_proto_depIdxs = []int32{
	1,  // 0: ViewState.analysisLayout:type_name -> AnalysisLayout
	26, // 1: ViewState.contextImages:type_name -> ViewState.ContextImagesEntry
	27, // 2: ViewState.histograms:type_name -> ViewState.HistogramsEntry
	28, // 3: ViewState.chordDiagrams:type_name -> ViewState.ChordDiagramsEntry
	29, // 4: ViewState.ternaryPlots:type_name -> ViewState.TernaryPlotsEntry
	30, // 5: ViewState.binaryPlots:type_name -> ViewState.BinaryPlotsEntry
	31, // 6: ViewState.tables:type_name -> ViewState.TablesEntry
	32, // 7: ViewState.roiQuantTables:type_name -> ViewState.RoiQuantTablesEntry
	33, // 8: ViewState.variograms:type_name -> ViewState.VariogramsEntry
	34, // 9: ViewState.spectrums:type_name -> ViewState.SpectrumsEntry
	35, // 10: ViewState.rgbuPlots:type_name -> ViewState.RgbuPlotsEntry
	36, // 11: ViewState.singleAxisRGBU:type_name -> ViewState.SingleAxisRGBUEntry
	37, // 12: ViewState.rgbuImages:type_name -> ViewState.RgbuImagesEntry
	38, // 13: ViewState.parallelograms:type_name -> ViewState.ParallelogramsEntry
	20, // 14: ViewState.annotations:type_name -> AnnotationDisplayState
	21, // 15: ViewState.rois:type_name -> ROIDisplayState
	7,  // 16: ViewState.quantification:type_name -> QuantificationState
	8,  // 17: ViewState.selection:type_name -> SelectionState
	41, // 18: SpectrumXRFLineState.lineInfo:type_name -> ElementLine
	4,  // 19: SpectrumWidgetState.spectrumLines:type_name -> SpectrumLines
	2,  // 20: SpectrumWidgetState.xrflines:type_name -> SpectrumXRFLineState
	3,  // 21: SpectrumWidgetState.energyCalibration:type_name -> EnergyCalibration
	15, // 22: ContextImageState.mapLayers:type_name -> MapLayerVisibility
	16, // 23: ContextImageState.roiLayers:type_name -> ROILayerVisibility
	18, // 24: FullScreenAnnotationItem.points:type_name -> AnnotationPoint
	19, // 25: AnnotationDisplayState.savedAnnotations:type_name -> FullScreenAnnotationItem
	39, // 26: ROIDisplayState.roiColours:type_name -> ROIDisplayState.RoiColoursEntry
	40, // 27: ROIDisplayState.roiShapes:type_name -> ROIDisplayState.RoiShapesEntry
	17, // 28: ViewState.ContextImagesEntry.value:type_name -> ContextImageState
	6,  // 29: ViewState.HistogramsEntry.value:type_name -> HistogramState
	9,  // 30: ViewState.ChordDiagramsEntry.value:type_name -> ChordState
	11, // 31: ViewState.TernaryPlotsEntry.value:type_name -> TernaryState
	10, // 32: ViewState.BinaryPlotsEntry.value:type_name -> BinaryState
	12, // 33: ViewState.TablesEntry.value:type_name -> TableState
	13, // 34: ViewState.RoiQuantTablesEntry.value:type_name -> ROIQuantTableState
	14, // 35: ViewState.VariogramsEntry.value:type_name -> VariogramState
	5,  // 36: ViewState.SpectrumsEntry.value:type_name -> SpectrumWidgetState
	22, // 37: ViewState.RgbuPlotsEntry.value:type_name -> RGBUPlotWidgetState
	23, // 38: ViewState.SingleAxisRGBUEntry.value:type_name -> SingleAxisRGBUWidgetState
	24, // 39: ViewState.RgbuImagesEntry.value:type_name -> RGBUImagesWidgetState
	25, // 40: ViewState.ParallelogramsEntry.value:type_name -> ParallelogramWidgetState
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_viewstate_proto_init() }
func file_viewstate_proto_init() {
	if File_viewstate_proto != nil {
		return
	}
	file_element_set_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_viewstate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumXRFLineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantificationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChordState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TernaryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROIQuantTableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariogramState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLayerVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROILayerVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextImageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullScreenAnnotationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationDisplayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROIDisplayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBUPlotWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAxisRGBUWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBUImagesWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_viewstate_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelogramWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_viewstate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_viewstate_proto_goTypes,
		DependencyIndexes: file_viewstate_proto_depIdxs,
		MessageInfos:      file_viewstate_proto_msgTypes,
	}.Build()
	File_viewstate_proto = out.File
	file_viewstate_proto_rawDesc = nil
	file_viewstate_proto_goTypes = nil
	file_viewstate_proto_depIdxs = nil
}
