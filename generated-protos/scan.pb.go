// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: scan.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScanDataType int32

const (
	ScanDataType_SD_UNKNOWN ScanDataType = 0 // https://protobuf.dev/programming-guides/dos-donts/ says specify an unknown as 0
	ScanDataType_SD_IMAGE   ScanDataType = 1
	ScanDataType_SD_XRF     ScanDataType = 2
	ScanDataType_SD_RGBU    ScanDataType = 3
)

// Enum value maps for ScanDataType.
var (
	ScanDataType_name = map[int32]string{
		0: "SD_UNKNOWN",
		1: "SD_IMAGE",
		2: "SD_XRF",
		3: "SD_RGBU",
	}
	ScanDataType_value = map[string]int32{
		"SD_UNKNOWN": 0,
		"SD_IMAGE":   1,
		"SD_XRF":     2,
		"SD_RGBU":    3,
	}
)

func (x ScanDataType) Enum() *ScanDataType {
	p := new(ScanDataType)
	*p = x
	return p
}

func (x ScanDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_scan_proto_enumTypes[0].Descriptor()
}

func (ScanDataType) Type() protoreflect.EnumType {
	return &file_scan_proto_enumTypes[0]
}

func (x ScanDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanDataType.Descriptor instead.
func (ScanDataType) EnumDescriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{0}
}

type ScanInstrument int32

const (
	ScanInstrument_UNKNOWN_INSTRUMENT ScanInstrument = 0 // https://protobuf.dev/programming-guides/dos-donts/ says specify an unknown as 0
	ScanInstrument_PIXL_FM            ScanInstrument = 1 // PIXL flight model, now located on planet Mars
	ScanInstrument_PIXL_EM            ScanInstrument = 2 // PIXL engineering model
	ScanInstrument_JPL_BREADBOARD     ScanInstrument = 3 // JPL PIXL lab Breadboard
	ScanInstrument_SBU_BREADBOARD     ScanInstrument = 4 // Stony Brook Breadboard
	ScanInstrument_BRUKER             ScanInstrument = 5
)

// Enum value maps for ScanInstrument.
var (
	ScanInstrument_name = map[int32]string{
		0: "UNKNOWN_INSTRUMENT",
		1: "PIXL_FM",
		2: "PIXL_EM",
		3: "JPL_BREADBOARD",
		4: "SBU_BREADBOARD",
		5: "BRUKER",
	}
	ScanInstrument_value = map[string]int32{
		"UNKNOWN_INSTRUMENT": 0,
		"PIXL_FM":            1,
		"PIXL_EM":            2,
		"JPL_BREADBOARD":     3,
		"SBU_BREADBOARD":     4,
		"BRUKER":             5,
	}
)

func (x ScanInstrument) Enum() *ScanInstrument {
	p := new(ScanInstrument)
	*p = x
	return p
}

func (x ScanInstrument) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanInstrument) Descriptor() protoreflect.EnumDescriptor {
	return file_scan_proto_enumTypes[1].Descriptor()
}

func (ScanInstrument) Type() protoreflect.EnumType {
	return &file_scan_proto_enumTypes[1]
}

func (x ScanInstrument) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanInstrument.Descriptor instead.
func (ScanInstrument) EnumDescriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{1}
}

type ScanMetaDataType int32

const (
	ScanMetaDataType_MT_FLOAT  ScanMetaDataType = 0
	ScanMetaDataType_MT_INT    ScanMetaDataType = 1
	ScanMetaDataType_MT_STRING ScanMetaDataType = 2
)

// Enum value maps for ScanMetaDataType.
var (
	ScanMetaDataType_name = map[int32]string{
		0: "MT_FLOAT",
		1: "MT_INT",
		2: "MT_STRING",
	}
	ScanMetaDataType_value = map[string]int32{
		"MT_FLOAT":  0,
		"MT_INT":    1,
		"MT_STRING": 2,
	}
)

func (x ScanMetaDataType) Enum() *ScanMetaDataType {
	p := new(ScanMetaDataType)
	*p = x
	return p
}

func (x ScanMetaDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanMetaDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_scan_proto_enumTypes[2].Descriptor()
}

func (ScanMetaDataType) Type() protoreflect.EnumType {
	return &file_scan_proto_enumTypes[2]
}

func (x ScanMetaDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanMetaDataType.Descriptor instead.
func (ScanMetaDataType) EnumDescriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{2}
}

type ScanItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for this scan
	Id          string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`                    
	Title       string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`             // Title to show for this scan
	Description string                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` // Description to show
	DataTypes   []*ScanItem_ScanTypeCount `protobuf:"bytes,4,rep,name=dataTypes,proto3" json:"dataTypes,omitempty"`
	// The instrument that collected the scan
	Instrument ScanInstrument `protobuf:"varint,5,opt,name=instrument,proto3,enum=ScanInstrument" json:"instrument,omitempty"`
	// Configuration name of the instrument as text
	// For PIXL, this is the detector config used, so we run quantifications with
	// the correct config
	InstrumentConfig string `protobuf:"bytes,6,opt,name=instrumentConfig,proto3" json:"instrumentConfig,omitempty"`
	// Unix time stamp for this scan (just to order it, so we don't care if this is the
	// time when the instrument did the scan, or when data was ingested into PIXLISE,
	// just need a time!)
	TimestampUnixSec uint32 `protobuf:"varint,7,opt,name=timestampUnixSec,proto3" json:"timestampUnixSec,omitempty"`
	// Meta-data for the scan to describe in an instrument-specific way when and where
	// it was collected
	//
	// NOTE: for PIXL scans, these will contain:
	// DriveId
	// SiteId, Site,
	// TargetId, Target
	// Sol
	// RTT (round-trip token)
	// SCLK
	Meta map[string]string `protobuf:"bytes,8,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Contents for the scan - what data types it has, and how many
	// NOTE: for PIXL scans, this will contain:
	// NormalSpectra (count)
	// DwellSpectra (count)
	// BulkSpectra (count)
	// MaxSpectra (count)
	// PseudoIntensities (count)
	ContentCounts map[string]int32  `protobuf:"bytes,9,rep,name=contentCounts,proto3" json:"contentCounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CreatorUserId string            `protobuf:"bytes,10,opt,name=creatorUserId,proto3" json:"creatorUserId,omitempty"` // Optional, but dataset may have been uploaded by a given user
	Owner         *OwnershipSummary `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty" bson:"-"`                  
	Tags          []string          `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	// If we import multiple times, we save the import time in our scan item
	PreviousImportTimesUnixSec []uint32 `protobuf:"varint,13,rep,packed,name=previousImportTimesUnixSec,proto3" json:"previousImportTimesUnixSec,omitempty"`
	// Time stamp when we had a complete scan (have all normal spectra)
	CompleteTimeStampUnixSec uint32 `protobuf:"varint,14,opt,name=completeTimeStampUnixSec,proto3" json:"completeTimeStampUnixSec,omitempty"`
}

func (x *ScanItem) Reset() {
	*x = ScanItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanItem) ProtoMessage() {}

func (x *ScanItem) ProtoReflect() protoreflect.Message {
	mi := &file_scan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanItem.ProtoReflect.Descriptor instead.
func (*ScanItem) Descriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{0}
}

func (x *ScanItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScanItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ScanItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScanItem) GetDataTypes() []*ScanItem_ScanTypeCount {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

func (x *ScanItem) GetInstrument() ScanInstrument {
	if x != nil {
		return x.Instrument
	}
	return ScanInstrument_UNKNOWN_INSTRUMENT
}

func (x *ScanItem) GetInstrumentConfig() string {
	if x != nil {
		return x.InstrumentConfig
	}
	return ""
}

func (x *ScanItem) GetTimestampUnixSec() uint32 {
	if x != nil {
		return x.TimestampUnixSec
	}
	return 0
}

func (x *ScanItem) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ScanItem) GetContentCounts() map[string]int32 {
	if x != nil {
		return x.ContentCounts
	}
	return nil
}

func (x *ScanItem) GetCreatorUserId() string {
	if x != nil {
		return x.CreatorUserId
	}
	return ""
}

func (x *ScanItem) GetOwner() *OwnershipSummary {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ScanItem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ScanItem) GetPreviousImportTimesUnixSec() []uint32 {
	if x != nil {
		return x.PreviousImportTimesUnixSec
	}
	return nil
}

func (x *ScanItem) GetCompleteTimeStampUnixSec() uint32 {
	if x != nil {
		return x.CompleteTimeStampUnixSec
	}
	return 0
}

type ScanMetaDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: we store the meta label outside, so these are expected to sit
	// in a: map<int32, ScanMetaDataItem>
	// Where the map key is the meta label which references the strings
	// returned by ScanMetaLabelsResp
	//
	// Types that are assignable to Value:
	//
	//	*ScanMetaDataItem_Fvalue
	//	*ScanMetaDataItem_Ivalue
	//	*ScanMetaDataItem_Svalue
	Value isScanMetaDataItem_Value `protobuf_oneof:"Value"`
}

func (x *ScanMetaDataItem) Reset() {
	*x = ScanMetaDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanMetaDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanMetaDataItem) ProtoMessage() {}

func (x *ScanMetaDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_scan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanMetaDataItem.ProtoReflect.Descriptor instead.
func (*ScanMetaDataItem) Descriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{1}
}

func (m *ScanMetaDataItem) GetValue() isScanMetaDataItem_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScanMetaDataItem) GetFvalue() float32 {
	if x, ok := x.GetValue().(*ScanMetaDataItem_Fvalue); ok {
		return x.Fvalue
	}
	return 0
}

func (x *ScanMetaDataItem) GetIvalue() int32 {
	if x, ok := x.GetValue().(*ScanMetaDataItem_Ivalue); ok {
		return x.Ivalue
	}
	return 0
}

func (x *ScanMetaDataItem) GetSvalue() string {
	if x, ok := x.GetValue().(*ScanMetaDataItem_Svalue); ok {
		return x.Svalue
	}
	return ""
}

type isScanMetaDataItem_Value interface {
	isScanMetaDataItem_Value()
}

type ScanMetaDataItem_Fvalue struct {
	Fvalue float32 `protobuf:"fixed32,1,opt,name=fvalue,proto3,oneof"`
}

type ScanMetaDataItem_Ivalue struct {
	Ivalue int32 `protobuf:"varint,2,opt,name=ivalue,proto3,oneof"`
}

type ScanMetaDataItem_Svalue struct {
	Svalue string `protobuf:"bytes,3,opt,name=svalue,proto3,oneof"`
}

func (*ScanMetaDataItem_Fvalue) isScanMetaDataItem_Value() {}

func (*ScanMetaDataItem_Ivalue) isScanMetaDataItem_Value() {}

func (*ScanMetaDataItem_Svalue) isScanMetaDataItem_Value() {}

type ScanEntryRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We want to be able to list all entry indexes that we're querying
	// This can be just an array of numbers, but we allow encoding runs as
	// <start idx>, -1, <end idx>. Therefore if you need all entries, and
	// the scan has 100 entries, send up 0, -1, 99 and the API will interpret
	// this as needing indexes: 0, 1, 2, ... 98, 99
	// Of course, multiple runs can be encoded, so 0, -1, 4, 50, -1, 55
	// should mean 0, 1, 2, 3, 4, 50, 51, 52, 53, 54, 55
	Indexes []int32 `protobuf:"varint,1,rep,packed,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *ScanEntryRange) Reset() {
	*x = ScanEntryRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanEntryRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanEntryRange) ProtoMessage() {}

func (x *ScanEntryRange) ProtoReflect() protoreflect.Message {
	mi := &file_scan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanEntryRange.ProtoReflect.Descriptor instead.
func (*ScanEntryRange) Descriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{2}
}

func (x *ScanEntryRange) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type ScanAutoShareEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`  
	Viewers *UserGroupList `protobuf:"bytes,2,opt,name=viewers,proto3" json:"viewers,omitempty"`
	Editors *UserGroupList `protobuf:"bytes,3,opt,name=editors,proto3" json:"editors,omitempty"`
}

func (x *ScanAutoShareEntry) Reset() {
	*x = ScanAutoShareEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanAutoShareEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanAutoShareEntry) ProtoMessage() {}

func (x *ScanAutoShareEntry) ProtoReflect() protoreflect.Message {
	mi := &file_scan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanAutoShareEntry.ProtoReflect.Descriptor instead.
func (*ScanAutoShareEntry) Descriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{3}
}

func (x *ScanAutoShareEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScanAutoShareEntry) GetViewers() *UserGroupList {
	if x != nil {
		return x.Viewers
	}
	return nil
}

func (x *ScanAutoShareEntry) GetEditors() *UserGroupList {
	if x != nil {
		return x.Editors
	}
	return nil
}

// Contains the type and how many of each
// For PIXL:
// XRF (PMC count)
// IMAGE (MCC count+custom image count)
// RGBU (0 or 2)
type ScanItem_ScanTypeCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType ScanDataType `protobuf:"varint,1,opt,name=dataType,proto3,enum=ScanDataType" json:"dataType,omitempty"`
	Count    uint32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ScanItem_ScanTypeCount) Reset() {
	*x = ScanItem_ScanTypeCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanItem_ScanTypeCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanItem_ScanTypeCount) ProtoMessage() {}

func (x *ScanItem_ScanTypeCount) ProtoReflect() protoreflect.Message {
	mi := &file_scan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanItem_ScanTypeCount.ProtoReflect.Descriptor instead.
func (*ScanItem_ScanTypeCount) Descriptor() ([]byte, []int) {
	return file_scan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ScanItem_ScanTypeCount) GetDataType() ScanDataType {
	if x != nil {
		return x.DataType
	}
	return ScanDataType_SD_UNKNOWN
}

func (x *ScanItem_ScanTypeCount) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_scan_proto protoreflect.FileDescriptor

var file_scan_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x06, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e,
	0x69, 0x78, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e,
	0x69, 0x78, 0x53, 0x65, 0x63, 0x1a, 0x50, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x69, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x06, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x69, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a,
	0x0e, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x12, 0x53, 0x63, 0x61,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x2a, 0x45, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x44, 0x5f, 0x58, 0x52, 0x46, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x44, 0x5f, 0x52, 0x47, 0x42, 0x55, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x0e, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x58, 0x4c, 0x5f, 0x46, 0x4d, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x58, 0x4c, 0x5f, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x4a, 0x50, 0x4c, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x42, 0x55, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x44, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x55, 0x4b, 0x45, 0x52,
	0x10, 0x05, 0x2a, 0x3b, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x5f, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_scan_proto_rawDescOnce sync.Once
	file_scan_proto_rawDescData = file_scan_proto_rawDesc
)

func file_scan_proto_rawDescGZIP() []byte {
	file_scan_proto_rawDescOnce.Do(func() {
		file_scan_proto_rawDescData = protoimpl.X.CompressGZIP(file_scan_proto_rawDescData)
	})
	return file_scan_proto_rawDescData
}

var file_scan_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_scan_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scan_proto_goTypes = []interface{}{
	(ScanDataType)(0),              // 0: ScanDataType
	(ScanInstrument)(0),            // 1: ScanInstrument
	(ScanMetaDataType)(0),          // 2: ScanMetaDataType
	(*ScanItem)(nil),               // 3: ScanItem
	(*ScanMetaDataItem)(nil),       // 4: ScanMetaDataItem
	(*ScanEntryRange)(nil),         // 5: ScanEntryRange
	(*ScanAutoShareEntry)(nil),     // 6: ScanAutoShareEntry
	(*ScanItem_ScanTypeCount)(nil), // 7: ScanItem.ScanTypeCount
	nil,                            // 8: ScanItem.MetaEntry
	nil,                            // 9: ScanItem.ContentCountsEntry
	(*OwnershipSummary)(nil),       // 10: OwnershipSummary
	(*UserGroupList)(nil),          // 11: UserGroupList
}
var file_scan_proto_depIdxs = []int32{
	7,  // 0: ScanItem.dataTypes:type_name -> ScanItem.ScanTypeCount
	1,  // 1: ScanItem.instrument:type_name -> ScanInstrument
	8,  // 2: ScanItem.meta:type_name -> ScanItem.MetaEntry
	9,  // 3: ScanItem.contentCounts:type_name -> ScanItem.ContentCountsEntry
	10, // 4: ScanItem.owner:type_name -> OwnershipSummary
	11, // 5: ScanAutoShareEntry.viewers:type_name -> UserGroupList
	11, // 6: ScanAutoShareEntry.editors:type_name -> UserGroupList
	0,  // 7: ScanItem.ScanTypeCount.dataType:type_name -> ScanDataType
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_scan_proto_init() }
func file_scan_proto_init() {
	if File_scan_proto != nil {
		return
	}
	file_ownership_access_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanMetaDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanEntryRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanAutoShareEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanItem_ScanTypeCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scan_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ScanMetaDataItem_Fvalue)(nil),
		(*ScanMetaDataItem_Ivalue)(nil),
		(*ScanMetaDataItem_Svalue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scan_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scan_proto_goTypes,
		DependencyIndexes: file_scan_proto_depIdxs,
		EnumInfos:         file_scan_proto_enumTypes,
		MessageInfos:      file_scan_proto_msgTypes,
	}.Build()
	File_scan_proto = out.File
	file_scan_proto_rawDesc = nil
	file_scan_proto_goTypes = nil
	file_scan_proto_depIdxs = nil
}
