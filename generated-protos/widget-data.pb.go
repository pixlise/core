// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: widget-data.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LightMode int32

const (
	LightMode_LM_UNKNOWN     LightMode = 0 // https://protobuf.dev/programming-guides/dos-donts/ says specify an unknown as 0
	LightMode_LM_POINT       LightMode = 1
	LightMode_LM_ENVIRONMENT LightMode = 3
)

// Enum value maps for LightMode.
var (
	LightMode_name = map[int32]string{
		0: "LM_UNKNOWN",
		1: "LM_POINT",
		3: "LM_ENVIRONMENT",
	}
	LightMode_value = map[string]int32{
		"LM_UNKNOWN":     0,
		"LM_POINT":       1,
		"LM_ENVIRONMENT": 3,
	}
)

func (x LightMode) Enum() *LightMode {
	p := new(LightMode)
	*p = x
	return p
}

func (x LightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_widget_data_proto_enumTypes[0].Descriptor()
}

func (LightMode) Type() protoreflect.EnumType {
	return &file_widget_data_proto_enumTypes[0]
}

func (x LightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LightMode.Descriptor instead.
func (LightMode) EnumDescriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{0}
}

type VisibleROI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanId string `protobuf:"bytes,2,opt,name=scanId,proto3" json:"scanId,omitempty"`
}

func (x *VisibleROI) Reset() {
	*x = VisibleROI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisibleROI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibleROI) ProtoMessage() {}

func (x *VisibleROI) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibleROI.ProtoReflect.Descriptor instead.
func (*VisibleROI) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{0}
}

func (x *VisibleROI) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VisibleROI) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

type SpectrumXRFLineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineInfo *ElementLine `protobuf:"bytes,1,opt,name=lineInfo,proto3" json:"lineInfo,omitempty"`
	Visible  bool         `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *SpectrumXRFLineState) Reset() {
	*x = SpectrumXRFLineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumXRFLineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumXRFLineState) ProtoMessage() {}

func (x *SpectrumXRFLineState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumXRFLineState.ProtoReflect.Descriptor instead.
func (*SpectrumXRFLineState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{1}
}

func (x *SpectrumXRFLineState) GetLineInfo() *ElementLine {
	if x != nil {
		return x.LineInfo
	}
	return nil
}

func (x *SpectrumXRFLineState) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type EnergyCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detector     string  `protobuf:"bytes,1,opt,name=detector,proto3" json:"detector,omitempty"`
	EVStart      float32 `protobuf:"fixed32,2,opt,name=eVStart,proto3" json:"eVStart,omitempty"`
	EVPerChannel float32 `protobuf:"fixed32,3,opt,name=eVPerChannel,proto3" json:"eVPerChannel,omitempty"`
}

func (x *EnergyCalibration) Reset() {
	*x = EnergyCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyCalibration) ProtoMessage() {}

func (x *EnergyCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyCalibration.ProtoReflect.Descriptor instead.
func (*EnergyCalibration) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{2}
}

func (x *EnergyCalibration) GetDetector() string {
	if x != nil {
		return x.Detector
	}
	return ""
}

func (x *EnergyCalibration) GetEVStart() float32 {
	if x != nil {
		return x.EVStart
	}
	return 0
}

func (x *EnergyCalibration) GetEVPerChannel() float32 {
	if x != nil {
		return x.EVPerChannel
	}
	return 0
}

type SpectrumLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoiID           string   `protobuf:"bytes,1,opt,name=roiID,proto3" json:"roiID,omitempty"`                     // can be "dataset" or "selection" for those special cases
	LineExpressions []string `protobuf:"bytes,2,rep,name=lineExpressions,proto3" json:"lineExpressions,omitempty"` // max(A), bulk(A) or things like sum(max(A), max(B))
}

func (x *SpectrumLines) Reset() {
	*x = SpectrumLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumLines) ProtoMessage() {}

func (x *SpectrumLines) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumLines.ProtoReflect.Descriptor instead.
func (*SpectrumLines) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{3}
}

func (x *SpectrumLines) GetRoiID() string {
	if x != nil {
		return x.RoiID
	}
	return ""
}

func (x *SpectrumLines) GetLineExpressions() []string {
	if x != nil {
		return x.LineExpressions
	}
	return nil
}

type SpectrumWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanX          float32          `protobuf:"fixed32,1,opt,name=panX,proto3" json:"panX,omitempty"`
	PanY          float32          `protobuf:"fixed32,2,opt,name=panY,proto3" json:"panY,omitempty"`
	ZoomX         float32          `protobuf:"fixed32,3,opt,name=zoomX,proto3" json:"zoomX,omitempty"`
	ZoomY         float32          `protobuf:"fixed32,4,opt,name=zoomY,proto3" json:"zoomY,omitempty"`
	SpectrumLines []*SpectrumLines `protobuf:"bytes,5,rep,name=spectrumLines,proto3" json:"spectrumLines,omitempty"`
	LogScale      bool             `protobuf:"varint,6,opt,name=logScale,proto3" json:"logScale,omitempty"`
	//repeated SpectrumXRFLineState xrflines = 7;
	ShowXAsEnergy bool `protobuf:"varint,8,opt,name=showXAsEnergy,proto3" json:"showXAsEnergy,omitempty"`
	//repeated EnergyCalibration    energyCalibration = 9;
	YCountsPerMin bool `protobuf:"varint,10,opt,name=yCountsPerMin,proto3" json:"yCountsPerMin,omitempty"`
	YCountsPerPMC bool `protobuf:"varint,11,opt,name=yCountsPerPMC,proto3" json:"yCountsPerPMC,omitempty"`
}

func (x *SpectrumWidgetState) Reset() {
	*x = SpectrumWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectrumWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectrumWidgetState) ProtoMessage() {}

func (x *SpectrumWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectrumWidgetState.ProtoReflect.Descriptor instead.
func (*SpectrumWidgetState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{4}
}

func (x *SpectrumWidgetState) GetPanX() float32 {
	if x != nil {
		return x.PanX
	}
	return 0
}

func (x *SpectrumWidgetState) GetPanY() float32 {
	if x != nil {
		return x.PanY
	}
	return 0
}

func (x *SpectrumWidgetState) GetZoomX() float32 {
	if x != nil {
		return x.ZoomX
	}
	return 0
}

func (x *SpectrumWidgetState) GetZoomY() float32 {
	if x != nil {
		return x.ZoomY
	}
	return 0
}

func (x *SpectrumWidgetState) GetSpectrumLines() []*SpectrumLines {
	if x != nil {
		return x.SpectrumLines
	}
	return nil
}

func (x *SpectrumWidgetState) GetLogScale() bool {
	if x != nil {
		return x.LogScale
	}
	return false
}

func (x *SpectrumWidgetState) GetShowXAsEnergy() bool {
	if x != nil {
		return x.ShowXAsEnergy
	}
	return false
}

func (x *SpectrumWidgetState) GetYCountsPerMin() bool {
	if x != nil {
		return x.YCountsPerMin
	}
	return false
}

func (x *SpectrumWidgetState) GetYCountsPerPMC() bool {
	if x != nil {
		return x.YCountsPerPMC
	}
	return false
}

type HistogramState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowStdDeviation   bool          `protobuf:"varint,1,opt,name=showStdDeviation,proto3" json:"showStdDeviation,omitempty"` // deprecated, see whiskerDisplayMode
	LogScale           bool          `protobuf:"varint,2,opt,name=logScale,proto3" json:"logScale,omitempty"`
	ExpressionIDs      []string      `protobuf:"bytes,3,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs        []*VisibleROI `protobuf:"bytes,4,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
	ShowWhiskers       bool          `protobuf:"varint,5,opt,name=showWhiskers,proto3" json:"showWhiskers,omitempty"` // deprecated, see zoomMode
	WhiskerDisplayMode string        `protobuf:"bytes,6,opt,name=whiskerDisplayMode,proto3" json:"whiskerDisplayMode,omitempty"`
	ZoomMode           string        `protobuf:"bytes,7,opt,name=zoomMode,proto3" json:"zoomMode,omitempty"`
}

func (x *HistogramState) Reset() {
	*x = HistogramState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramState) ProtoMessage() {}

func (x *HistogramState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramState.ProtoReflect.Descriptor instead.
func (*HistogramState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{5}
}

func (x *HistogramState) GetShowStdDeviation() bool {
	if x != nil {
		return x.ShowStdDeviation
	}
	return false
}

func (x *HistogramState) GetLogScale() bool {
	if x != nil {
		return x.LogScale
	}
	return false
}

func (x *HistogramState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *HistogramState) GetVisibleROIs() []*VisibleROI {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

func (x *HistogramState) GetShowWhiskers() bool {
	if x != nil {
		return x.ShowWhiskers
	}
	return false
}

func (x *HistogramState) GetWhiskerDisplayMode() string {
	if x != nil {
		return x.WhiskerDisplayMode
	}
	return ""
}

func (x *HistogramState) GetZoomMode() string {
	if x != nil {
		return x.ZoomMode
	}
	return ""
}

type ChordState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowForSelection bool     `protobuf:"varint,1,opt,name=showForSelection,proto3" json:"showForSelection,omitempty"`
	ExpressionIDs    []string `protobuf:"bytes,2,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	DisplayROI       string   `protobuf:"bytes,3,opt,name=displayROI,proto3" json:"displayROI,omitempty"`
	Threshold        float32  `protobuf:"fixed32,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	DrawMode         string   `protobuf:"bytes,5,opt,name=drawMode,proto3" json:"drawMode,omitempty"`
}

func (x *ChordState) Reset() {
	*x = ChordState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChordState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChordState) ProtoMessage() {}

func (x *ChordState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChordState.ProtoReflect.Descriptor instead.
func (*ChordState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{6}
}

func (x *ChordState) GetShowForSelection() bool {
	if x != nil {
		return x.ShowForSelection
	}
	return false
}

func (x *ChordState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *ChordState) GetDisplayROI() string {
	if x != nil {
		return x.DisplayROI
	}
	return ""
}

func (x *ChordState) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ChordState) GetDrawMode() string {
	if x != nil {
		return x.DrawMode
	}
	return ""
}

type BinaryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowMmol          bool          `protobuf:"varint,1,opt,name=showMmol,proto3" json:"showMmol,omitempty"`
	ExpressionIDs     []string      `protobuf:"bytes,2,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs       []*VisibleROI `protobuf:"bytes,3,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
	ReferenceIds      []string      `protobuf:"bytes,4,rep,name=referenceIds,proto3" json:"referenceIds,omitempty"`
	SelectedMinXValue float64       `protobuf:"fixed64,5,opt,name=selectedMinXValue,proto3" json:"selectedMinXValue,omitempty"`
	SelectedMaxXValue float64       `protobuf:"fixed64,6,opt,name=selectedMaxXValue,proto3" json:"selectedMaxXValue,omitempty"`
	SelectedMinYValue float64       `protobuf:"fixed64,7,opt,name=selectedMinYValue,proto3" json:"selectedMinYValue,omitempty"`
	SelectedMaxYValue float64       `protobuf:"fixed64,8,opt,name=selectedMaxYValue,proto3" json:"selectedMaxYValue,omitempty"`
}

func (x *BinaryState) Reset() {
	*x = BinaryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryState) ProtoMessage() {}

func (x *BinaryState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryState.ProtoReflect.Descriptor instead.
func (*BinaryState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{7}
}

func (x *BinaryState) GetShowMmol() bool {
	if x != nil {
		return x.ShowMmol
	}
	return false
}

func (x *BinaryState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *BinaryState) GetVisibleROIs() []*VisibleROI {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

func (x *BinaryState) GetReferenceIds() []string {
	if x != nil {
		return x.ReferenceIds
	}
	return nil
}

func (x *BinaryState) GetSelectedMinXValue() float64 {
	if x != nil {
		return x.SelectedMinXValue
	}
	return 0
}

func (x *BinaryState) GetSelectedMaxXValue() float64 {
	if x != nil {
		return x.SelectedMaxXValue
	}
	return 0
}

func (x *BinaryState) GetSelectedMinYValue() float64 {
	if x != nil {
		return x.SelectedMinYValue
	}
	return 0
}

func (x *BinaryState) GetSelectedMaxYValue() float64 {
	if x != nil {
		return x.SelectedMaxYValue
	}
	return 0
}

type TernaryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowMmol      bool          `protobuf:"varint,1,opt,name=showMmol,proto3" json:"showMmol,omitempty"`
	ExpressionIDs []string      `protobuf:"bytes,2,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs   []*VisibleROI `protobuf:"bytes,3,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
	ReferenceIds  []string      `protobuf:"bytes,4,rep,name=referenceIds,proto3" json:"referenceIds,omitempty"`
}

func (x *TernaryState) Reset() {
	*x = TernaryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TernaryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TernaryState) ProtoMessage() {}

func (x *TernaryState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TernaryState.ProtoReflect.Descriptor instead.
func (*TernaryState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{8}
}

func (x *TernaryState) GetShowMmol() bool {
	if x != nil {
		return x.ShowMmol
	}
	return false
}

func (x *TernaryState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *TernaryState) GetVisibleROIs() []*VisibleROI {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

func (x *TernaryState) GetReferenceIds() []string {
	if x != nil {
		return x.ReferenceIds
	}
	return nil
}

type VisibleROIAndQuant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanId  string `protobuf:"bytes,2,opt,name=scanId,proto3" json:"scanId,omitempty"`
	QuantId string `protobuf:"bytes,3,opt,name=quantId,proto3" json:"quantId,omitempty"`
}

func (x *VisibleROIAndQuant) Reset() {
	*x = VisibleROIAndQuant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisibleROIAndQuant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibleROIAndQuant) ProtoMessage() {}

func (x *VisibleROIAndQuant) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibleROIAndQuant.ProtoReflect.Descriptor instead.
func (*VisibleROIAndQuant) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{9}
}

func (x *VisibleROIAndQuant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VisibleROIAndQuant) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

func (x *VisibleROIAndQuant) GetQuantId() string {
	if x != nil {
		return x.QuantId
	}
	return ""
}

type TableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowPureElements bool                  `protobuf:"varint,1,opt,name=showPureElements,proto3" json:"showPureElements,omitempty"`
	Order            string                `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	VisibleROIs      []*VisibleROIAndQuant `protobuf:"bytes,3,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
}

func (x *TableState) Reset() {
	*x = TableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableState) ProtoMessage() {}

func (x *TableState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableState.ProtoReflect.Descriptor instead.
func (*TableState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{10}
}

func (x *TableState) GetShowPureElements() bool {
	if x != nil {
		return x.ShowPureElements
	}
	return false
}

func (x *TableState) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *TableState) GetVisibleROIs() []*VisibleROIAndQuant {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

type ROIQuantTableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roi      string   `protobuf:"bytes,1,opt,name=roi,proto3" json:"roi,omitempty"`
	QuantIDs []string `protobuf:"bytes,2,rep,name=quantIDs,proto3" json:"quantIDs,omitempty"`
}

func (x *ROIQuantTableState) Reset() {
	*x = ROIQuantTableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROIQuantTableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIQuantTableState) ProtoMessage() {}

func (x *ROIQuantTableState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIQuantTableState.ProtoReflect.Descriptor instead.
func (*ROIQuantTableState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{11}
}

func (x *ROIQuantTableState) GetRoi() string {
	if x != nil {
		return x.Roi
	}
	return ""
}

func (x *ROIQuantTableState) GetQuantIDs() []string {
	if x != nil {
		return x.QuantIDs
	}
	return nil
}

type VariogramState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionIDs        []string      `protobuf:"bytes,1,rep,name=expressionIDs,proto3" json:"expressionIDs,omitempty"`
	VisibleROIs          []*VisibleROI `protobuf:"bytes,2,rep,name=visibleROIs,proto3" json:"visibleROIs,omitempty"`
	VarioModel           string        `protobuf:"bytes,3,opt,name=varioModel,proto3" json:"varioModel,omitempty"` // valid: "exponential", "spherical", "gaussian"
	MaxDistance          float32       `protobuf:"fixed32,4,opt,name=maxDistance,proto3" json:"maxDistance,omitempty"`
	BinCount             int32         `protobuf:"varint,5,opt,name=binCount,proto3" json:"binCount,omitempty"`
	DrawModeVector       bool          `protobuf:"varint,6,opt,name=drawModeVector,proto3" json:"drawModeVector,omitempty"`            // vector or isotropic
	ComparisonAlgorithms []string      `protobuf:"bytes,7,rep,name=comparisonAlgorithms,proto3" json:"comparisonAlgorithms,omitempty"` // "Subtract", "XOR-Sum", <Expression ID>
	LiveUpdate           bool          `protobuf:"varint,8,opt,name=liveUpdate,proto3" json:"liveUpdate,omitempty"`
	DistanceSliderMin    float32       `protobuf:"fixed32,9,opt,name=distanceSliderMin,proto3" json:"distanceSliderMin,omitempty"`
	DistanceSliderMax    float32       `protobuf:"fixed32,10,opt,name=distanceSliderMax,proto3" json:"distanceSliderMax,omitempty"`
	BinSliderMin         float32       `protobuf:"fixed32,11,opt,name=binSliderMin,proto3" json:"binSliderMin,omitempty"`
	BinSliderMax         float32       `protobuf:"fixed32,12,opt,name=binSliderMax,proto3" json:"binSliderMax,omitempty"`
	DrawBestFit          bool          `protobuf:"varint,13,opt,name=drawBestFit,proto3" json:"drawBestFit,omitempty"`
}

func (x *VariogramState) Reset() {
	*x = VariogramState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariogramState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariogramState) ProtoMessage() {}

func (x *VariogramState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariogramState.ProtoReflect.Descriptor instead.
func (*VariogramState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{12}
}

func (x *VariogramState) GetExpressionIDs() []string {
	if x != nil {
		return x.ExpressionIDs
	}
	return nil
}

func (x *VariogramState) GetVisibleROIs() []*VisibleROI {
	if x != nil {
		return x.VisibleROIs
	}
	return nil
}

func (x *VariogramState) GetVarioModel() string {
	if x != nil {
		return x.VarioModel
	}
	return ""
}

func (x *VariogramState) GetMaxDistance() float32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *VariogramState) GetBinCount() int32 {
	if x != nil {
		return x.BinCount
	}
	return 0
}

func (x *VariogramState) GetDrawModeVector() bool {
	if x != nil {
		return x.DrawModeVector
	}
	return false
}

func (x *VariogramState) GetComparisonAlgorithms() []string {
	if x != nil {
		return x.ComparisonAlgorithms
	}
	return nil
}

func (x *VariogramState) GetLiveUpdate() bool {
	if x != nil {
		return x.LiveUpdate
	}
	return false
}

func (x *VariogramState) GetDistanceSliderMin() float32 {
	if x != nil {
		return x.DistanceSliderMin
	}
	return 0
}

func (x *VariogramState) GetDistanceSliderMax() float32 {
	if x != nil {
		return x.DistanceSliderMax
	}
	return 0
}

func (x *VariogramState) GetBinSliderMin() float32 {
	if x != nil {
		return x.BinSliderMin
	}
	return 0
}

func (x *VariogramState) GetBinSliderMax() float32 {
	if x != nil {
		return x.BinSliderMax
	}
	return 0
}

func (x *VariogramState) GetDrawBestFit() bool {
	if x != nil {
		return x.DrawBestFit
	}
	return false
}

type MapLayerGroupDisplayRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionID         string  `protobuf:"bytes,1,opt,name=expressionID,proto3" json:"expressionID,omitempty"`
	DisplayValueRangeMin float32 `protobuf:"fixed32,2,opt,name=displayValueRangeMin,proto3" json:"displayValueRangeMin,omitempty"`
	DisplayValueRangeMax float32 `protobuf:"fixed32,3,opt,name=displayValueRangeMax,proto3" json:"displayValueRangeMax,omitempty"`
}

func (x *MapLayerGroupDisplayRange) Reset() {
	*x = MapLayerGroupDisplayRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLayerGroupDisplayRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLayerGroupDisplayRange) ProtoMessage() {}

func (x *MapLayerGroupDisplayRange) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLayerGroupDisplayRange.ProtoReflect.Descriptor instead.
func (*MapLayerGroupDisplayRange) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{13}
}

func (x *MapLayerGroupDisplayRange) GetExpressionID() string {
	if x != nil {
		return x.ExpressionID
	}
	return ""
}

func (x *MapLayerGroupDisplayRange) GetDisplayValueRangeMin() float32 {
	if x != nil {
		return x.DisplayValueRangeMin
	}
	return 0
}

func (x *MapLayerGroupDisplayRange) GetDisplayValueRangeMax() float32 {
	if x != nil {
		return x.DisplayValueRangeMax
	}
	return 0
}

type MapLayerVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionID         string  `protobuf:"bytes,1,opt,name=expressionID,proto3" json:"expressionID,omitempty"`
	Opacity              float32 `protobuf:"fixed32,2,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Visible              bool    `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
	DisplayValueRangeMin float32 `protobuf:"fixed32,4,opt,name=displayValueRangeMin,proto3" json:"displayValueRangeMin,omitempty"`
	DisplayValueRangeMax float32 `protobuf:"fixed32,5,opt,name=displayValueRangeMax,proto3" json:"displayValueRangeMax,omitempty"`
	DisplayValueShading  string  `protobuf:"bytes,6,opt,name=displayValueShading,proto3" json:"displayValueShading,omitempty"`
	// For RGB Mixes, we want to store the display value ranges for each group of layers
	DisplayValueRanges []*MapLayerGroupDisplayRange `protobuf:"bytes,7,rep,name=displayValueRanges,proto3" json:"displayValueRanges,omitempty"`
}

func (x *MapLayerVisibility) Reset() {
	*x = MapLayerVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapLayerVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapLayerVisibility) ProtoMessage() {}

func (x *MapLayerVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapLayerVisibility.ProtoReflect.Descriptor instead.
func (*MapLayerVisibility) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{14}
}

func (x *MapLayerVisibility) GetExpressionID() string {
	if x != nil {
		return x.ExpressionID
	}
	return ""
}

func (x *MapLayerVisibility) GetOpacity() float32 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *MapLayerVisibility) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *MapLayerVisibility) GetDisplayValueRangeMin() float32 {
	if x != nil {
		return x.DisplayValueRangeMin
	}
	return 0
}

func (x *MapLayerVisibility) GetDisplayValueRangeMax() float32 {
	if x != nil {
		return x.DisplayValueRangeMax
	}
	return 0
}

func (x *MapLayerVisibility) GetDisplayValueShading() string {
	if x != nil {
		return x.DisplayValueShading
	}
	return ""
}

func (x *MapLayerVisibility) GetDisplayValueRanges() []*MapLayerGroupDisplayRange {
	if x != nil {
		return x.DisplayValueRanges
	}
	return nil
}

type ROILayerVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Opacity float32 `protobuf:"fixed32,2,opt,name=opacity,proto3" json:"opacity,omitempty"`
	Visible bool    `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
	ScanId  string  `protobuf:"bytes,4,opt,name=scanId,proto3" json:"scanId,omitempty"`
}

func (x *ROILayerVisibility) Reset() {
	*x = ROILayerVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROILayerVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROILayerVisibility) ProtoMessage() {}

func (x *ROILayerVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROILayerVisibility.ProtoReflect.Descriptor instead.
func (*ROILayerVisibility) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{15}
}

func (x *ROILayerVisibility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ROILayerVisibility) GetOpacity() float32 {
	if x != nil {
		return x.Opacity
	}
	return 0
}

func (x *ROILayerVisibility) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *ROILayerVisibility) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

type ContextImageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanX                          float32               `protobuf:"fixed32,1,opt,name=panX,proto3" json:"panX,omitempty"`
	PanY                          float32               `protobuf:"fixed32,2,opt,name=panY,proto3" json:"panY,omitempty"`
	ZoomX                         float32               `protobuf:"fixed32,3,opt,name=zoomX,proto3" json:"zoomX,omitempty"`
	ZoomY                         float32               `protobuf:"fixed32,4,opt,name=zoomY,proto3" json:"zoomY,omitempty"`
	ShowPoints                    bool                  `protobuf:"varint,5,opt,name=showPoints,proto3" json:"showPoints,omitempty"`
	ShowPointBBox                 bool                  `protobuf:"varint,6,opt,name=showPointBBox,proto3" json:"showPointBBox,omitempty"`
	PointColourScheme             string                `protobuf:"bytes,7,opt,name=pointColourScheme,proto3" json:"pointColourScheme,omitempty"`
	PointBBoxColourScheme         string                `protobuf:"bytes,8,opt,name=pointBBoxColourScheme,proto3" json:"pointBBoxColourScheme,omitempty"`
	ContextImage                  string                `protobuf:"bytes,9,opt,name=contextImage,proto3" json:"contextImage,omitempty"`
	ContextImageSmoothing         string                `protobuf:"bytes,10,opt,name=contextImageSmoothing,proto3" json:"contextImageSmoothing,omitempty"`
	MapLayers                     []*MapLayerVisibility `protobuf:"bytes,11,rep,name=mapLayers,proto3" json:"mapLayers,omitempty"`
	RoiLayers                     []*ROILayerVisibility `protobuf:"bytes,12,rep,name=roiLayers,proto3" json:"roiLayers,omitempty"`
	ElementRelativeShading        bool                  `protobuf:"varint,13,opt,name=elementRelativeShading,proto3" json:"elementRelativeShading,omitempty"`
	Brightness                    float32               `protobuf:"fixed32,14,opt,name=brightness,proto3" json:"brightness,omitempty"`
	RgbuChannels                  string                `protobuf:"bytes,15,opt,name=rgbuChannels,proto3" json:"rgbuChannels,omitempty"`
	UnselectedOpacity             float32               `protobuf:"fixed32,16,opt,name=unselectedOpacity,proto3" json:"unselectedOpacity,omitempty"`
	UnselectedGrayscale           bool                  `protobuf:"varint,17,opt,name=unselectedGrayscale,proto3" json:"unselectedGrayscale,omitempty"`
	ColourRatioMin                float32               `protobuf:"fixed32,18,opt,name=colourRatioMin,proto3" json:"colourRatioMin,omitempty"`
	ColourRatioMax                float32               `protobuf:"fixed32,19,opt,name=colourRatioMax,proto3" json:"colourRatioMax,omitempty"`
	RemoveTopSpecularArtifacts    bool                  `protobuf:"varint,20,opt,name=removeTopSpecularArtifacts,proto3" json:"removeTopSpecularArtifacts,omitempty"`
	RemoveBottomSpecularArtifacts bool                  `protobuf:"varint,21,opt,name=removeBottomSpecularArtifacts,proto3" json:"removeBottomSpecularArtifacts,omitempty"`
	HideFootprintsForScans        []string              `protobuf:"bytes,22,rep,name=hideFootprintsForScans,proto3" json:"hideFootprintsForScans,omitempty"`
	HidePointsForScans            []string              `protobuf:"bytes,23,rep,name=hidePointsForScans,proto3" json:"hidePointsForScans,omitempty"`
	UnlinkFromDataset             bool                  `protobuf:"varint,25,opt,name=unlinkFromDataset,proto3" json:"unlinkFromDataset,omitempty"`
	HideImage                     bool                  `protobuf:"varint,26,opt,name=hideImage,proto3" json:"hideImage,omitempty"` // Was drawImage but zero-value being false meant lots of hidden context images!
	ShowMISTROIReproducibility    bool                  `protobuf:"varint,27,opt,name=showMISTROIReproducibility,proto3" json:"showMISTROIReproducibility,omitempty"`
}

func (x *ContextImageState) Reset() {
	*x = ContextImageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextImageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextImageState) ProtoMessage() {}

func (x *ContextImageState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextImageState.ProtoReflect.Descriptor instead.
func (*ContextImageState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{16}
}

func (x *ContextImageState) GetPanX() float32 {
	if x != nil {
		return x.PanX
	}
	return 0
}

func (x *ContextImageState) GetPanY() float32 {
	if x != nil {
		return x.PanY
	}
	return 0
}

func (x *ContextImageState) GetZoomX() float32 {
	if x != nil {
		return x.ZoomX
	}
	return 0
}

func (x *ContextImageState) GetZoomY() float32 {
	if x != nil {
		return x.ZoomY
	}
	return 0
}

func (x *ContextImageState) GetShowPoints() bool {
	if x != nil {
		return x.ShowPoints
	}
	return false
}

func (x *ContextImageState) GetShowPointBBox() bool {
	if x != nil {
		return x.ShowPointBBox
	}
	return false
}

func (x *ContextImageState) GetPointColourScheme() string {
	if x != nil {
		return x.PointColourScheme
	}
	return ""
}

func (x *ContextImageState) GetPointBBoxColourScheme() string {
	if x != nil {
		return x.PointBBoxColourScheme
	}
	return ""
}

func (x *ContextImageState) GetContextImage() string {
	if x != nil {
		return x.ContextImage
	}
	return ""
}

func (x *ContextImageState) GetContextImageSmoothing() string {
	if x != nil {
		return x.ContextImageSmoothing
	}
	return ""
}

func (x *ContextImageState) GetMapLayers() []*MapLayerVisibility {
	if x != nil {
		return x.MapLayers
	}
	return nil
}

func (x *ContextImageState) GetRoiLayers() []*ROILayerVisibility {
	if x != nil {
		return x.RoiLayers
	}
	return nil
}

func (x *ContextImageState) GetElementRelativeShading() bool {
	if x != nil {
		return x.ElementRelativeShading
	}
	return false
}

func (x *ContextImageState) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *ContextImageState) GetRgbuChannels() string {
	if x != nil {
		return x.RgbuChannels
	}
	return ""
}

func (x *ContextImageState) GetUnselectedOpacity() float32 {
	if x != nil {
		return x.UnselectedOpacity
	}
	return 0
}

func (x *ContextImageState) GetUnselectedGrayscale() bool {
	if x != nil {
		return x.UnselectedGrayscale
	}
	return false
}

func (x *ContextImageState) GetColourRatioMin() float32 {
	if x != nil {
		return x.ColourRatioMin
	}
	return 0
}

func (x *ContextImageState) GetColourRatioMax() float32 {
	if x != nil {
		return x.ColourRatioMax
	}
	return 0
}

func (x *ContextImageState) GetRemoveTopSpecularArtifacts() bool {
	if x != nil {
		return x.RemoveTopSpecularArtifacts
	}
	return false
}

func (x *ContextImageState) GetRemoveBottomSpecularArtifacts() bool {
	if x != nil {
		return x.RemoveBottomSpecularArtifacts
	}
	return false
}

func (x *ContextImageState) GetHideFootprintsForScans() []string {
	if x != nil {
		return x.HideFootprintsForScans
	}
	return nil
}

func (x *ContextImageState) GetHidePointsForScans() []string {
	if x != nil {
		return x.HidePointsForScans
	}
	return nil
}

func (x *ContextImageState) GetUnlinkFromDataset() bool {
	if x != nil {
		return x.UnlinkFromDataset
	}
	return false
}

func (x *ContextImageState) GetHideImage() bool {
	if x != nil {
		return x.HideImage
	}
	return false
}

func (x *ContextImageState) GetShowMISTROIReproducibility() bool {
	if x != nil {
		return x.ShowMISTROIReproducibility
	}
	return false
}

type Coordinate4D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W float32 `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
}

func (x *Coordinate4D) Reset() {
	*x = Coordinate4D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate4D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate4D) ProtoMessage() {}

func (x *Coordinate4D) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate4D.ProtoReflect.Descriptor instead.
func (*Coordinate4D) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{17}
}

func (x *Coordinate4D) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinate4D) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Coordinate4D) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Coordinate4D) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

type Scan3DViewState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brightness                    float32               `protobuf:"fixed32,3,opt,name=brightness,proto3" json:"brightness,omitempty"`
	RgbuChannels                  string                `protobuf:"bytes,4,opt,name=rgbuChannels,proto3" json:"rgbuChannels,omitempty"`
	UnselectedOpacity             float32               `protobuf:"fixed32,5,opt,name=unselectedOpacity,proto3" json:"unselectedOpacity,omitempty"`
	UnselectedGrayscale           bool                  `protobuf:"varint,6,opt,name=unselectedGrayscale,proto3" json:"unselectedGrayscale,omitempty"`
	ColourRatioMin                float32               `protobuf:"fixed32,7,opt,name=colourRatioMin,proto3" json:"colourRatioMin,omitempty"`
	ColourRatioMax                float32               `protobuf:"fixed32,8,opt,name=colourRatioMax,proto3" json:"colourRatioMax,omitempty"`
	RemoveTopSpecularArtifacts    bool                  `protobuf:"varint,9,opt,name=removeTopSpecularArtifacts,proto3" json:"removeTopSpecularArtifacts,omitempty"`
	RemoveBottomSpecularArtifacts bool                  `protobuf:"varint,10,opt,name=removeBottomSpecularArtifacts,proto3" json:"removeBottomSpecularArtifacts,omitempty"`
	HideFootprintsForScans        []string              `protobuf:"bytes,11,rep,name=hideFootprintsForScans,proto3" json:"hideFootprintsForScans,omitempty"`
	HidePointsForScans            []string              `protobuf:"bytes,12,rep,name=hidePointsForScans,proto3" json:"hidePointsForScans,omitempty"`
	ContextImage                  string                `protobuf:"bytes,13,opt,name=contextImage,proto3" json:"contextImage,omitempty"`
	ContextImageSmoothing         string                `protobuf:"bytes,14,opt,name=contextImageSmoothing,proto3" json:"contextImageSmoothing,omitempty"`
	LightMode                     LightMode             `protobuf:"varint,2,opt,name=lightMode,proto3,enum=LightMode" json:"lightMode,omitempty"`
	PlaneYScale                   float32               `protobuf:"fixed32,15,opt,name=planeYScale,proto3" json:"planeYScale,omitempty"`
	ShowFootprint                 bool                  `protobuf:"varint,16,opt,name=showFootprint,proto3" json:"showFootprint,omitempty"`
	CameraPosition                *Coordinate3D         `protobuf:"bytes,17,opt,name=cameraPosition,proto3" json:"cameraPosition,omitempty"`
	CameraRotation                *Coordinate4D         `protobuf:"bytes,18,opt,name=cameraRotation,proto3" json:"cameraRotation,omitempty"`
	CameraTarget                  *Coordinate3D         `protobuf:"bytes,19,opt,name=cameraTarget,proto3" json:"cameraTarget,omitempty"`
	CameraZoom                    float32               `protobuf:"fixed32,20,opt,name=cameraZoom,proto3" json:"cameraZoom,omitempty"`
	HeightExaggerationScale       float32               `protobuf:"fixed32,21,opt,name=heightExaggerationScale,proto3" json:"heightExaggerationScale,omitempty"`
	PointLightPosition            *Coordinate3D         `protobuf:"bytes,22,opt,name=pointLightPosition,proto3" json:"pointLightPosition,omitempty"`
	MapLayers                     []*MapLayerVisibility `protobuf:"bytes,23,rep,name=mapLayers,proto3" json:"mapLayers,omitempty"`
	RoiLayers                     []*ROILayerVisibility `protobuf:"bytes,24,rep,name=roiLayers,proto3" json:"roiLayers,omitempty"`
}

func (x *Scan3DViewState) Reset() {
	*x = Scan3DViewState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scan3DViewState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scan3DViewState) ProtoMessage() {}

func (x *Scan3DViewState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scan3DViewState.ProtoReflect.Descriptor instead.
func (*Scan3DViewState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{18}
}

func (x *Scan3DViewState) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *Scan3DViewState) GetRgbuChannels() string {
	if x != nil {
		return x.RgbuChannels
	}
	return ""
}

func (x *Scan3DViewState) GetUnselectedOpacity() float32 {
	if x != nil {
		return x.UnselectedOpacity
	}
	return 0
}

func (x *Scan3DViewState) GetUnselectedGrayscale() bool {
	if x != nil {
		return x.UnselectedGrayscale
	}
	return false
}

func (x *Scan3DViewState) GetColourRatioMin() float32 {
	if x != nil {
		return x.ColourRatioMin
	}
	return 0
}

func (x *Scan3DViewState) GetColourRatioMax() float32 {
	if x != nil {
		return x.ColourRatioMax
	}
	return 0
}

func (x *Scan3DViewState) GetRemoveTopSpecularArtifacts() bool {
	if x != nil {
		return x.RemoveTopSpecularArtifacts
	}
	return false
}

func (x *Scan3DViewState) GetRemoveBottomSpecularArtifacts() bool {
	if x != nil {
		return x.RemoveBottomSpecularArtifacts
	}
	return false
}

func (x *Scan3DViewState) GetHideFootprintsForScans() []string {
	if x != nil {
		return x.HideFootprintsForScans
	}
	return nil
}

func (x *Scan3DViewState) GetHidePointsForScans() []string {
	if x != nil {
		return x.HidePointsForScans
	}
	return nil
}

func (x *Scan3DViewState) GetContextImage() string {
	if x != nil {
		return x.ContextImage
	}
	return ""
}

func (x *Scan3DViewState) GetContextImageSmoothing() string {
	if x != nil {
		return x.ContextImageSmoothing
	}
	return ""
}

func (x *Scan3DViewState) GetLightMode() LightMode {
	if x != nil {
		return x.LightMode
	}
	return LightMode_LM_UNKNOWN
}

func (x *Scan3DViewState) GetPlaneYScale() float32 {
	if x != nil {
		return x.PlaneYScale
	}
	return 0
}

func (x *Scan3DViewState) GetShowFootprint() bool {
	if x != nil {
		return x.ShowFootprint
	}
	return false
}

func (x *Scan3DViewState) GetCameraPosition() *Coordinate3D {
	if x != nil {
		return x.CameraPosition
	}
	return nil
}

func (x *Scan3DViewState) GetCameraRotation() *Coordinate4D {
	if x != nil {
		return x.CameraRotation
	}
	return nil
}

func (x *Scan3DViewState) GetCameraTarget() *Coordinate3D {
	if x != nil {
		return x.CameraTarget
	}
	return nil
}

func (x *Scan3DViewState) GetCameraZoom() float32 {
	if x != nil {
		return x.CameraZoom
	}
	return 0
}

func (x *Scan3DViewState) GetHeightExaggerationScale() float32 {
	if x != nil {
		return x.HeightExaggerationScale
	}
	return 0
}

func (x *Scan3DViewState) GetPointLightPosition() *Coordinate3D {
	if x != nil {
		return x.PointLightPosition
	}
	return nil
}

func (x *Scan3DViewState) GetMapLayers() []*MapLayerVisibility {
	if x != nil {
		return x.MapLayers
	}
	return nil
}

func (x *Scan3DViewState) GetRoiLayers() []*ROILayerVisibility {
	if x != nil {
		return x.RoiLayers
	}
	return nil
}

type AnnotationPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X            float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y            float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	ScreenWidth  float32 `protobuf:"fixed32,3,opt,name=screenWidth,proto3" json:"screenWidth,omitempty"`
	ScreenHeight float32 `protobuf:"fixed32,4,opt,name=screenHeight,proto3" json:"screenHeight,omitempty"`
}

func (x *AnnotationPoint) Reset() {
	*x = AnnotationPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationPoint) ProtoMessage() {}

func (x *AnnotationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationPoint.ProtoReflect.Descriptor instead.
func (*AnnotationPoint) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{19}
}

func (x *AnnotationPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *AnnotationPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *AnnotationPoint) GetScreenWidth() float32 {
	if x != nil {
		return x.ScreenWidth
	}
	return 0
}

func (x *AnnotationPoint) GetScreenHeight() float32 {
	if x != nil {
		return x.ScreenHeight
	}
	return 0
}

type FullScreenAnnotationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Points   []*AnnotationPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	Colour   string             `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
	Complete bool               `protobuf:"varint,4,opt,name=complete,proto3" json:"complete,omitempty"`
	Text     string             `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	FontSize int32              `protobuf:"varint,6,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Id       int32              `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FullScreenAnnotationItem) Reset() {
	*x = FullScreenAnnotationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullScreenAnnotationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullScreenAnnotationItem) ProtoMessage() {}

func (x *FullScreenAnnotationItem) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullScreenAnnotationItem.ProtoReflect.Descriptor instead.
func (*FullScreenAnnotationItem) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{20}
}

func (x *FullScreenAnnotationItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FullScreenAnnotationItem) GetPoints() []*AnnotationPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *FullScreenAnnotationItem) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

func (x *FullScreenAnnotationItem) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *FullScreenAnnotationItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *FullScreenAnnotationItem) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *FullScreenAnnotationItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AnnotationDisplayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedAnnotations []*FullScreenAnnotationItem `protobuf:"bytes,1,rep,name=savedAnnotations,proto3" json:"savedAnnotations,omitempty"`
}

func (x *AnnotationDisplayState) Reset() {
	*x = AnnotationDisplayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationDisplayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationDisplayState) ProtoMessage() {}

func (x *AnnotationDisplayState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationDisplayState.ProtoReflect.Descriptor instead.
func (*AnnotationDisplayState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{21}
}

func (x *AnnotationDisplayState) GetSavedAnnotations() []*FullScreenAnnotationItem {
	if x != nil {
		return x.SavedAnnotations
	}
	return nil
}

type ROIDisplayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoiColours map[string]string `protobuf:"bytes,1,rep,name=roiColours,proto3" json:"roiColours,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoiShapes  map[string]string `protobuf:"bytes,2,rep,name=roiShapes,proto3" json:"roiShapes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ROIDisplayState) Reset() {
	*x = ROIDisplayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROIDisplayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIDisplayState) ProtoMessage() {}

func (x *ROIDisplayState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIDisplayState.ProtoReflect.Descriptor instead.
func (*ROIDisplayState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{22}
}

func (x *ROIDisplayState) GetRoiColours() map[string]string {
	if x != nil {
		return x.RoiColours
	}
	return nil
}

func (x *ROIDisplayState) GetRoiShapes() map[string]string {
	if x != nil {
		return x.RoiShapes
	}
	return nil
}

type RGBUPlotWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minerals          []string `protobuf:"bytes,1,rep,name=minerals,proto3" json:"minerals,omitempty"`
	YChannelA         string   `protobuf:"bytes,2,opt,name=yChannelA,proto3" json:"yChannelA,omitempty"`
	YChannelB         string   `protobuf:"bytes,3,opt,name=yChannelB,proto3" json:"yChannelB,omitempty"`
	XChannelA         string   `protobuf:"bytes,4,opt,name=xChannelA,proto3" json:"xChannelA,omitempty"`
	XChannelB         string   `protobuf:"bytes,5,opt,name=xChannelB,proto3" json:"xChannelB,omitempty"`
	DrawMonochrome    bool     `protobuf:"varint,6,opt,name=drawMonochrome,proto3" json:"drawMonochrome,omitempty"`
	SelectedMinXValue float32  `protobuf:"fixed32,7,opt,name=selectedMinXValue,proto3" json:"selectedMinXValue,omitempty"`
	SelectedMaxXValue float32  `protobuf:"fixed32,8,opt,name=selectedMaxXValue,proto3" json:"selectedMaxXValue,omitempty"`
	SelectedMinYValue float32  `protobuf:"fixed32,9,opt,name=selectedMinYValue,proto3" json:"selectedMinYValue,omitempty"`
	SelectedMaxYValue float32  `protobuf:"fixed32,10,opt,name=selectedMaxYValue,proto3" json:"selectedMaxYValue,omitempty"`
	ImageName         string   `protobuf:"bytes,11,opt,name=imageName,proto3" json:"imageName,omitempty"`
	RoiIds            []string `protobuf:"bytes,12,rep,name=roiIds,proto3" json:"roiIds,omitempty"`
}

func (x *RGBUPlotWidgetState) Reset() {
	*x = RGBUPlotWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBUPlotWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBUPlotWidgetState) ProtoMessage() {}

func (x *RGBUPlotWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBUPlotWidgetState.ProtoReflect.Descriptor instead.
func (*RGBUPlotWidgetState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{23}
}

func (x *RGBUPlotWidgetState) GetMinerals() []string {
	if x != nil {
		return x.Minerals
	}
	return nil
}

func (x *RGBUPlotWidgetState) GetYChannelA() string {
	if x != nil {
		return x.YChannelA
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetYChannelB() string {
	if x != nil {
		return x.YChannelB
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetXChannelA() string {
	if x != nil {
		return x.XChannelA
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetXChannelB() string {
	if x != nil {
		return x.XChannelB
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetDrawMonochrome() bool {
	if x != nil {
		return x.DrawMonochrome
	}
	return false
}

func (x *RGBUPlotWidgetState) GetSelectedMinXValue() float32 {
	if x != nil {
		return x.SelectedMinXValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetSelectedMaxXValue() float32 {
	if x != nil {
		return x.SelectedMaxXValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetSelectedMinYValue() float32 {
	if x != nil {
		return x.SelectedMinYValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetSelectedMaxYValue() float32 {
	if x != nil {
		return x.SelectedMaxYValue
	}
	return 0
}

func (x *RGBUPlotWidgetState) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *RGBUPlotWidgetState) GetRoiIds() []string {
	if x != nil {
		return x.RoiIds
	}
	return nil
}

type SingleAxisRGBUWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minerals             []string `protobuf:"bytes,1,rep,name=minerals,proto3" json:"minerals,omitempty"`
	ChannelA             string   `protobuf:"bytes,2,opt,name=channelA,proto3" json:"channelA,omitempty"`
	ChannelB             string   `protobuf:"bytes,3,opt,name=channelB,proto3" json:"channelB,omitempty"`
	RoiStackedOverlap    bool     `protobuf:"varint,4,opt,name=roiStackedOverlap,proto3" json:"roiStackedOverlap,omitempty"`
	ImageName            string   `protobuf:"bytes,5,opt,name=imageName,proto3" json:"imageName,omitempty"`
	SelectedMinValue     float32  `protobuf:"fixed32,6,opt,name=selectedMinValue,proto3" json:"selectedMinValue,omitempty"`
	SelectedMaxValue     float32  `protobuf:"fixed32,7,opt,name=selectedMaxValue,proto3" json:"selectedMaxValue,omitempty"`
	RoiIds               []string `protobuf:"bytes,8,rep,name=roiIds,proto3" json:"roiIds,omitempty"`
	ShowAllMineralLabels bool     `protobuf:"varint,9,opt,name=showAllMineralLabels,proto3" json:"showAllMineralLabels,omitempty"`
}

func (x *SingleAxisRGBUWidgetState) Reset() {
	*x = SingleAxisRGBUWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAxisRGBUWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAxisRGBUWidgetState) ProtoMessage() {}

func (x *SingleAxisRGBUWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAxisRGBUWidgetState.ProtoReflect.Descriptor instead.
func (*SingleAxisRGBUWidgetState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{24}
}

func (x *SingleAxisRGBUWidgetState) GetMinerals() []string {
	if x != nil {
		return x.Minerals
	}
	return nil
}

func (x *SingleAxisRGBUWidgetState) GetChannelA() string {
	if x != nil {
		return x.ChannelA
	}
	return ""
}

func (x *SingleAxisRGBUWidgetState) GetChannelB() string {
	if x != nil {
		return x.ChannelB
	}
	return ""
}

func (x *SingleAxisRGBUWidgetState) GetRoiStackedOverlap() bool {
	if x != nil {
		return x.RoiStackedOverlap
	}
	return false
}

func (x *SingleAxisRGBUWidgetState) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *SingleAxisRGBUWidgetState) GetSelectedMinValue() float32 {
	if x != nil {
		return x.SelectedMinValue
	}
	return 0
}

func (x *SingleAxisRGBUWidgetState) GetSelectedMaxValue() float32 {
	if x != nil {
		return x.SelectedMaxValue
	}
	return 0
}

func (x *SingleAxisRGBUWidgetState) GetRoiIds() []string {
	if x != nil {
		return x.RoiIds
	}
	return nil
}

func (x *SingleAxisRGBUWidgetState) GetShowAllMineralLabels() bool {
	if x != nil {
		return x.ShowAllMineralLabels
	}
	return false
}

type RGBUImagesWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting was never implemented
	//bool logColour = 1;
	Brightness float32 `protobuf:"fixed32,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
	ImageName  string  `protobuf:"bytes,3,opt,name=imageName,proto3" json:"imageName,omitempty"`
}

func (x *RGBUImagesWidgetState) Reset() {
	*x = RGBUImagesWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBUImagesWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBUImagesWidgetState) ProtoMessage() {}

func (x *RGBUImagesWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBUImagesWidgetState.ProtoReflect.Descriptor instead.
func (*RGBUImagesWidgetState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{25}
}

func (x *RGBUImagesWidgetState) GetBrightness() float32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *RGBUImagesWidgetState) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type ParallelogramWidgetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions     []string `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
	Channels    []string `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	ExcludeZero bool     `protobuf:"varint,4,opt,name=excludeZero,proto3" json:"excludeZero,omitempty"`
	AverageMode string   `protobuf:"bytes,5,opt,name=averageMode,proto3" json:"averageMode,omitempty"` // "mean", "median"
	SigmaLevel  string   `protobuf:"bytes,6,opt,name=sigmaLevel,proto3" json:"sigmaLevel,omitempty"`   // None, Sigma +1, Sigma +2
}

func (x *ParallelogramWidgetState) Reset() {
	*x = ParallelogramWidgetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelogramWidgetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelogramWidgetState) ProtoMessage() {}

func (x *ParallelogramWidgetState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelogramWidgetState.ProtoReflect.Descriptor instead.
func (*ParallelogramWidgetState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{26}
}

func (x *ParallelogramWidgetState) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *ParallelogramWidgetState) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ParallelogramWidgetState) GetExcludeZero() bool {
	if x != nil {
		return x.ExcludeZero
	}
	return false
}

func (x *ParallelogramWidgetState) GetAverageMode() string {
	if x != nil {
		return x.AverageMode
	}
	return ""
}

func (x *ParallelogramWidgetState) GetSigmaLevel() string {
	if x != nil {
		return x.SigmaLevel
	}
	return ""
}

type MarkdownViewState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MarkdownViewState) Reset() {
	*x = MarkdownViewState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownViewState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownViewState) ProtoMessage() {}

func (x *MarkdownViewState) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownViewState.ProtoReflect.Descriptor instead.
func (*MarkdownViewState) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{27}
}

func (x *MarkdownViewState) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type WidgetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`                                 
	WidgetName        string                     `protobuf:"bytes,16,opt,name=widgetName,proto3" json:"widgetName,omitempty" bson:"widgetName,omitempty"`                
	WidgetDescription string                     `protobuf:"bytes,17,opt,name=widgetDescription,proto3" json:"widgetDescription,omitempty" bson:"widgetDescription,omitempty"`  
	Spectrum          *SpectrumWidgetState       `protobuf:"bytes,2,opt,name=spectrum,proto3" json:"spectrum,omitempty"`
	Binary            *BinaryState               `protobuf:"bytes,3,opt,name=binary,proto3" json:"binary,omitempty"`
	Ternary           *TernaryState              `protobuf:"bytes,4,opt,name=ternary,proto3" json:"ternary,omitempty"`
	Histogram         *HistogramState            `protobuf:"bytes,5,opt,name=histogram,proto3" json:"histogram,omitempty"`
	ContextImage      *ContextImageState         `protobuf:"bytes,6,opt,name=contextImage,proto3" json:"contextImage,omitempty"`
	Chord             *ChordState                `protobuf:"bytes,7,opt,name=chord,proto3" json:"chord,omitempty"`
	Table             *TableState                `protobuf:"bytes,8,opt,name=table,proto3" json:"table,omitempty"`
	RoiQuantTable     *ROIQuantTableState        `protobuf:"bytes,9,opt,name=roiQuantTable,proto3" json:"roiQuantTable,omitempty"`
	Variogram         *VariogramState            `protobuf:"bytes,10,opt,name=variogram,proto3" json:"variogram,omitempty"`
	RgbuPlot          *RGBUPlotWidgetState       `protobuf:"bytes,11,opt,name=rgbuPlot,proto3" json:"rgbuPlot,omitempty"`
	SingleAxisRGBU    *SingleAxisRGBUWidgetState `protobuf:"bytes,12,opt,name=singleAxisRGBU,proto3" json:"singleAxisRGBU,omitempty"`
	RgbuImage         *RGBUImagesWidgetState     `protobuf:"bytes,13,opt,name=rgbuImage,proto3" json:"rgbuImage,omitempty"`
	Parallelogram     *ParallelogramWidgetState  `protobuf:"bytes,14,opt,name=parallelogram,proto3" json:"parallelogram,omitempty"`
	MarkdownView      *MarkdownViewState         `protobuf:"bytes,15,opt,name=markdownView,proto3" json:"markdownView,omitempty"`
	Scan3DView        *Scan3DViewState           `protobuf:"bytes,18,opt,name=scan3DView,proto3" json:"scan3DView,omitempty"`
}

func (x *WidgetData) Reset() {
	*x = WidgetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_widget_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidgetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidgetData) ProtoMessage() {}

func (x *WidgetData) ProtoReflect() protoreflect.Message {
	mi := &file_widget_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidgetData.ProtoReflect.Descriptor instead.
func (*WidgetData) Descriptor() ([]byte, []int) {
	return file_widget_data_proto_rawDescGZIP(), []int{28}
}

func (x *WidgetData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WidgetData) GetWidgetName() string {
	if x != nil {
		return x.WidgetName
	}
	return ""
}

func (x *WidgetData) GetWidgetDescription() string {
	if x != nil {
		return x.WidgetDescription
	}
	return ""
}

func (x *WidgetData) GetSpectrum() *SpectrumWidgetState {
	if x != nil {
		return x.Spectrum
	}
	return nil
}

func (x *WidgetData) GetBinary() *BinaryState {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *WidgetData) GetTernary() *TernaryState {
	if x != nil {
		return x.Ternary
	}
	return nil
}

func (x *WidgetData) GetHistogram() *HistogramState {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *WidgetData) GetContextImage() *ContextImageState {
	if x != nil {
		return x.ContextImage
	}
	return nil
}

func (x *WidgetData) GetChord() *ChordState {
	if x != nil {
		return x.Chord
	}
	return nil
}

func (x *WidgetData) GetTable() *TableState {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *WidgetData) GetRoiQuantTable() *ROIQuantTableState {
	if x != nil {
		return x.RoiQuantTable
	}
	return nil
}

func (x *WidgetData) GetVariogram() *VariogramState {
	if x != nil {
		return x.Variogram
	}
	return nil
}

func (x *WidgetData) GetRgbuPlot() *RGBUPlotWidgetState {
	if x != nil {
		return x.RgbuPlot
	}
	return nil
}

func (x *WidgetData) GetSingleAxisRGBU() *SingleAxisRGBUWidgetState {
	if x != nil {
		return x.SingleAxisRGBU
	}
	return nil
}

func (x *WidgetData) GetRgbuImage() *RGBUImagesWidgetState {
	if x != nil {
		return x.RgbuImage
	}
	return nil
}

func (x *WidgetData) GetParallelogram() *ParallelogramWidgetState {
	if x != nil {
		return x.Parallelogram
	}
	return nil
}

func (x *WidgetData) GetMarkdownView() *MarkdownViewState {
	if x != nil {
		return x.MarkdownView
	}
	return nil
}

func (x *WidgetData) GetScan3DView() *Scan3DViewState {
	if x != nil {
		return x.Scan3DView
	}
	return nil
}

var File_widget_data_proto protoreflect.FileDescriptor

var file_widget_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x63, 0x61, 0x6e, 0x2d, 0x62, 0x65, 0x61,
	0x6d, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x34, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x58, 0x52, 0x46, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x56, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x56, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x56, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x56, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x69, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x69, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x6e, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x6e, 0x58, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x6e, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61,
	0x6e, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f, 0x6d,
	0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x59, 0x12, 0x34,
	0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x58, 0x41, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x58, 0x41, 0x73,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x4d, 0x43, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50,
	0x4d, 0x43, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f,
	0x49, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x4f, 0x49, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f,
	0x49, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x68, 0x69, 0x73, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x68,
	0x69, 0x73, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x68, 0x69, 0x73, 0x6b, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x69, 0x73, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x77, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x4f,
	0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x4f, 0x49, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x02,
	0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12,
	0x2d, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f,
	0x49, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x58,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x59, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x59, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x54,
	0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x4d, 0x6d, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x52,
	0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x56, 0x0a, 0x12, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x41, 0x6e,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50,
	0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x41, 0x6e, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73,
	0x22, 0x42, 0x0a, 0x12, 0x52, 0x4f, 0x49, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x22, 0x85, 0x04, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x52,
	0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x4f, 0x49, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x62, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72,
	0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x69,
	0x6e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72,
	0x61, 0x77, 0x42, 0x65, 0x73, 0x74, 0x46, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x64, 0x72, 0x61, 0x77, 0x42, 0x65, 0x73, 0x74, 0x46, 0x69, 0x74, 0x22, 0xa7, 0x01, 0x0a,
	0x19, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x22, 0xd2, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x4a, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61,
	0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x12, 0x52,
	0x4f, 0x49, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xfd, 0x08,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x6e, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x70, 0x61, 0x6e, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x6e, 0x59, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x61, 0x6e, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x7a,
	0x6f, 0x6f, 0x6d, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d,
	0x58, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x7a, 0x6f, 0x6f, 0x6d, 0x59, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x42, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x42, 0x6f, 0x78, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6d,
	0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x72, 0x6f, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x52, 0x4f, 0x49, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x68, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x67, 0x62,
	0x75, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x67, 0x62, 0x75, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x3e, 0x0a,
	0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x68,
	0x69, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x75,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x64,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69,
	0x64, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x4d,
	0x49, 0x53, 0x54, 0x52, 0x4f, 0x49, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x68, 0x6f,
	0x77, 0x4d, 0x49, 0x53, 0x54, 0x52, 0x4f, 0x49, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x22, 0x46, 0x0a,
	0x0c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x34, 0x44, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0xdf, 0x08, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6e, 0x33, 0x44,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x67, 0x62,
	0x75, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x67, 0x62, 0x75, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x75,
	0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x3e, 0x0a,
	0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x68,
	0x69, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x59, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x59, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6f,
	0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x33, 0x44, 0x52, 0x0e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x34, 0x44, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x33, 0x44, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x45, 0x78, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x45, 0x78, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x33, 0x44, 0x52, 0x12, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x4f, 0x49, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x72, 0x6f,
	0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xcc, 0x01, 0x0a,
	0x18, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x16, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x02, 0x0a,
	0x0f, 0x52, 0x4f, 0x49, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x72, 0x6f, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x4f, 0x49, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x6f, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x6f, 0x69, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x4f, 0x49, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x69, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x69, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x6f, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x6f, 0x69, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf,
	0x03, 0x0a, 0x13, 0x52, 0x47, 0x42, 0x55, 0x50, 0x6c, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x12, 0x1c, 0x0a, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x12, 0x1c,
	0x0a, 0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x12, 0x1c, 0x0a, 0x09,
	0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72,
	0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x6f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x6e, 0x6f, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x58,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x58, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x59, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x59, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x59, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x69, 0x49,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x69, 0x49, 0x64, 0x73,
	0x22, 0xdf, 0x02, 0x0a, 0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52,
	0x47, 0x42, 0x55, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72,
	0x6f, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x69, 0x49, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x69, 0x49, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68,
	0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x52, 0x47, 0x42, 0x55, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x2d, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd9, 0x06, 0x0a, 0x0a, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x72, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x65,
	0x72, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x68,
	0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x68, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x63, 0x68, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0d, 0x72, 0x6f, 0x69, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x4f, 0x49, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x6f,
	0x69, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x67,
	0x62, 0x75, 0x50, 0x6c, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x47, 0x42, 0x55, 0x50, 0x6c, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x72, 0x67, 0x62, 0x75, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x0e,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52, 0x47, 0x42, 0x55, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69,
	0x73, 0x52, 0x47, 0x42, 0x55, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x78, 0x69, 0x73, 0x52, 0x47, 0x42, 0x55,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x67, 0x62, 0x75, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x47, 0x42, 0x55, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x67, 0x62,
	0x75, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x30, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x33, 0x44, 0x56, 0x69, 0x65, 0x77, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x33, 0x44, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x33, 0x44, 0x56, 0x69, 0x65,
	0x77, 0x2a, 0x3d, 0x0a, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x4d, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x4d, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_widget_data_proto_rawDescOnce sync.Once
	file_widget_data_proto_rawDescData = file_widget_data_proto_rawDesc
)

func file_widget_data_proto_rawDescGZIP() []byte {
	file_widget_data_proto_rawDescOnce.Do(func() {
		file_widget_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_widget_data_proto_rawDescData)
	})
	return file_widget_data_proto_rawDescData
}

var file_widget_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_widget_data_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_widget_data_proto_goTypes = []interface{}{
	(LightMode)(0),                    // 0: LightMode
	(*VisibleROI)(nil),                // 1: VisibleROI
	(*SpectrumXRFLineState)(nil),      // 2: SpectrumXRFLineState
	(*EnergyCalibration)(nil),         // 3: EnergyCalibration
	(*SpectrumLines)(nil),             // 4: SpectrumLines
	(*SpectrumWidgetState)(nil),       // 5: SpectrumWidgetState
	(*HistogramState)(nil),            // 6: HistogramState
	(*ChordState)(nil),                // 7: ChordState
	(*BinaryState)(nil),               // 8: BinaryState
	(*TernaryState)(nil),              // 9: TernaryState
	(*VisibleROIAndQuant)(nil),        // 10: VisibleROIAndQuant
	(*TableState)(nil),                // 11: TableState
	(*ROIQuantTableState)(nil),        // 12: ROIQuantTableState
	(*VariogramState)(nil),            // 13: VariogramState
	(*MapLayerGroupDisplayRange)(nil), // 14: MapLayerGroupDisplayRange
	(*MapLayerVisibility)(nil),        // 15: MapLayerVisibility
	(*ROILayerVisibility)(nil),        // 16: ROILayerVisibility
	(*ContextImageState)(nil),         // 17: ContextImageState
	(*Coordinate4D)(nil),              // 18: Coordinate4D
	(*Scan3DViewState)(nil),           // 19: Scan3DViewState
	(*AnnotationPoint)(nil),           // 20: AnnotationPoint
	(*FullScreenAnnotationItem)(nil),  // 21: FullScreenAnnotationItem
	(*AnnotationDisplayState)(nil),    // 22: AnnotationDisplayState
	(*ROIDisplayState)(nil),           // 23: ROIDisplayState
	(*RGBUPlotWidgetState)(nil),       // 24: RGBUPlotWidgetState
	(*SingleAxisRGBUWidgetState)(nil), // 25: SingleAxisRGBUWidgetState
	(*RGBUImagesWidgetState)(nil),     // 26: RGBUImagesWidgetState
	(*ParallelogramWidgetState)(nil),  // 27: ParallelogramWidgetState
	(*MarkdownViewState)(nil),         // 28: MarkdownViewState
	(*WidgetData)(nil),                // 29: WidgetData
	nil,                               // 30: ROIDisplayState.RoiColoursEntry
	nil,                               // 31: ROIDisplayState.RoiShapesEntry
	(*ElementLine)(nil),               // 32: ElementLine
	(*Coordinate3D)(nil),              // 33: Coordinate3D
}
var file_widget_data_proto_depIdxs = []int32{
	32, // 0: SpectrumXRFLineState.lineInfo:type_name -> ElementLine
	4,  // 1: SpectrumWidgetState.spectrumLines:type_name -> SpectrumLines
	1,  // 2: HistogramState.visibleROIs:type_name -> VisibleROI
	1,  // 3: BinaryState.visibleROIs:type_name -> VisibleROI
	1,  // 4: TernaryState.visibleROIs:type_name -> VisibleROI
	10, // 5: TableState.visibleROIs:type_name -> VisibleROIAndQuant
	1,  // 6: VariogramState.visibleROIs:type_name -> VisibleROI
	14, // 7: MapLayerVisibility.displayValueRanges:type_name -> MapLayerGroupDisplayRange
	15, // 8: ContextImageState.mapLayers:type_name -> MapLayerVisibility
	16, // 9: ContextImageState.roiLayers:type_name -> ROILayerVisibility
	0,  // 10: Scan3DViewState.lightMode:type_name -> LightMode
	33, // 11: Scan3DViewState.cameraPosition:type_name -> Coordinate3D
	18, // 12: Scan3DViewState.cameraRotation:type_name -> Coordinate4D
	33, // 13: Scan3DViewState.cameraTarget:type_name -> Coordinate3D
	33, // 14: Scan3DViewState.pointLightPosition:type_name -> Coordinate3D
	15, // 15: Scan3DViewState.mapLayers:type_name -> MapLayerVisibility
	16, // 16: Scan3DViewState.roiLayers:type_name -> ROILayerVisibility
	20, // 17: FullScreenAnnotationItem.points:type_name -> AnnotationPoint
	21, // 18: AnnotationDisplayState.savedAnnotations:type_name -> FullScreenAnnotationItem
	30, // 19: ROIDisplayState.roiColours:type_name -> ROIDisplayState.RoiColoursEntry
	31, // 20: ROIDisplayState.roiShapes:type_name -> ROIDisplayState.RoiShapesEntry
	5,  // 21: WidgetData.spectrum:type_name -> SpectrumWidgetState
	8,  // 22: WidgetData.binary:type_name -> BinaryState
	9,  // 23: WidgetData.ternary:type_name -> TernaryState
	6,  // 24: WidgetData.histogram:type_name -> HistogramState
	17, // 25: WidgetData.contextImage:type_name -> ContextImageState
	7,  // 26: WidgetData.chord:type_name -> ChordState
	11, // 27: WidgetData.table:type_name -> TableState
	12, // 28: WidgetData.roiQuantTable:type_name -> ROIQuantTableState
	13, // 29: WidgetData.variogram:type_name -> VariogramState
	24, // 30: WidgetData.rgbuPlot:type_name -> RGBUPlotWidgetState
	25, // 31: WidgetData.singleAxisRGBU:type_name -> SingleAxisRGBUWidgetState
	26, // 32: WidgetData.rgbuImage:type_name -> RGBUImagesWidgetState
	27, // 33: WidgetData.parallelogram:type_name -> ParallelogramWidgetState
	28, // 34: WidgetData.markdownView:type_name -> MarkdownViewState
	19, // 35: WidgetData.scan3DView:type_name -> Scan3DViewState
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_widget_data_proto_init() }
func file_widget_data_proto_init() {
	if File_widget_data_proto != nil {
		return
	}
	file_element_set_proto_init()
	file_scan_beam_location_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_widget_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisibleROI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumXRFLineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectrumWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChordState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TernaryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisibleROIAndQuant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROIQuantTableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariogramState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLayerGroupDisplayRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapLayerVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROILayerVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextImageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate4D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scan3DViewState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullScreenAnnotationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationDisplayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROIDisplayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBUPlotWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAxisRGBUWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBUImagesWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelogramWidgetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownViewState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_widget_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidgetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_widget_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_widget_data_proto_goTypes,
		DependencyIndexes: file_widget_data_proto_depIdxs,
		EnumInfos:         file_widget_data_proto_enumTypes,
		MessageInfos:      file_widget_data_proto_msgTypes,
	}.Build()
	File_widget_data_proto = out.File
	file_widget_data_proto_rawDesc = nil
	file_widget_data_proto_goTypes = nil
	file_widget_data_proto_depIdxs = nil
}
