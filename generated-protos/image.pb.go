// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.19.4
// source: image.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Where it came from - the instrument or some other source
type ScanImageSource int32

const (
	ScanImageSource_SI_UNKNOWN    ScanImageSource = 0 // https://protobuf.dev/programming-guides/dos-donts/ says specify an unknown as 0
	ScanImageSource_SI_INSTRUMENT ScanImageSource = 1 // Instrument provided image, eg in PIXL case, it's an MCC image
	ScanImageSource_SI_UPLOAD     ScanImageSource = 2 // Any uploaded image that's not sourced from the instrument
)

// Enum value maps for ScanImageSource.
var (
	ScanImageSource_name = map[int32]string{
		0: "SI_UNKNOWN",
		1: "SI_INSTRUMENT",
		2: "SI_UPLOAD",
	}
	ScanImageSource_value = map[string]int32{
		"SI_UNKNOWN":    0,
		"SI_INSTRUMENT": 1,
		"SI_UPLOAD":     2,
	}
)

func (x ScanImageSource) Enum() *ScanImageSource {
	p := new(ScanImageSource)
	*p = x
	return p
}

func (x ScanImageSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanImageSource) Descriptor() protoreflect.EnumDescriptor {
	return file_image_proto_enumTypes[0].Descriptor()
}

func (ScanImageSource) Type() protoreflect.EnumType {
	return &file_image_proto_enumTypes[0]
}

func (x ScanImageSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanImageSource.Descriptor instead.
func (ScanImageSource) EnumDescriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{0}
}

// Image purpose - is it just for viewing, or perhaps it provides channel data to some algorithm
type ScanImagePurpose int32

const (
	ScanImagePurpose_SIP_UNKNOWN      ScanImagePurpose = 0 // https://protobuf.dev/programming-guides/dos-donts/ says specify an unknown as 0
	ScanImagePurpose_SIP_VIEWING      ScanImagePurpose = 1 // Just for viewing, as a background to scan points/other data
	ScanImagePurpose_SIP_MULTICHANNEL ScanImagePurpose = 2 // For multi-channel analysis, so as source for binary plots, etc
)

// Enum value maps for ScanImagePurpose.
var (
	ScanImagePurpose_name = map[int32]string{
		0: "SIP_UNKNOWN",
		1: "SIP_VIEWING",
		2: "SIP_MULTICHANNEL",
	}
	ScanImagePurpose_value = map[string]int32{
		"SIP_UNKNOWN":      0,
		"SIP_VIEWING":      1,
		"SIP_MULTICHANNEL": 2,
	}
)

func (x ScanImagePurpose) Enum() *ScanImagePurpose {
	p := new(ScanImagePurpose)
	*p = x
	return p
}

func (x ScanImagePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanImagePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_image_proto_enumTypes[1].Descriptor()
}

func (ScanImagePurpose) Type() protoreflect.EnumType {
	return &file_image_proto_enumTypes[1]
}

func (x ScanImagePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanImagePurpose.Descriptor instead.
func (ScanImagePurpose) EnumDescriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{1}
}

// Describes a single image that is associated with a scan
type ScanImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"_id,omitempty"`  
	Source   ScanImageSource  `protobuf:"varint,2,opt,name=source,proto3,enum=ScanImageSource" json:"source,omitempty"`
	Width    uint32           `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32           `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	FileSize uint32           `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	Purpose  ScanImagePurpose `protobuf:"varint,6,opt,name=purpose,proto3,enum=ScanImagePurpose" json:"purpose,omitempty"`
	// All scans associated with this image
	AssociatedScanIds []string `protobuf:"bytes,7,rep,name=associatedScanIds,proto3" json:"associatedScanIds,omitempty"`
	// The scan the image originates from (in case of images taken by the
	// XRF instruments own camera, eg with PIXL, images taken by MCC)
	// If this is empty, this image came from another source
	OriginScanId string `protobuf:"bytes,8,opt,name=originScanId,proto3" json:"originScanId,omitempty"`
	// Link to the original image - for PIXL this will be a link to Mars Viewer
	// but other devices/imports could define a link to some original image location
	OriginImageURL string `protobuf:"bytes,9,opt,name=originImageURL,proto3" json:"originImageURL,omitempty"`
	// So client can send a HTTP GET and image gets cached by browser, etc
	Path string `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	// If its "matched" to another image, this should be filled out
	MatchInfo *ImageMatchTransform `protobuf:"bytes,11,opt,name=matchInfo,proto3" json:"matchInfo,omitempty"`
}

func (x *ScanImage) Reset() {
	*x = ScanImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanImage) ProtoMessage() {}

func (x *ScanImage) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanImage.ProtoReflect.Descriptor instead.
func (*ScanImage) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{0}
}

func (x *ScanImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScanImage) GetSource() ScanImageSource {
	if x != nil {
		return x.Source
	}
	return ScanImageSource_SI_UNKNOWN
}

func (x *ScanImage) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ScanImage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ScanImage) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ScanImage) GetPurpose() ScanImagePurpose {
	if x != nil {
		return x.Purpose
	}
	return ScanImagePurpose_SIP_UNKNOWN
}

func (x *ScanImage) GetAssociatedScanIds() []string {
	if x != nil {
		return x.AssociatedScanIds
	}
	return nil
}

func (x *ScanImage) GetOriginScanId() string {
	if x != nil {
		return x.OriginScanId
	}
	return ""
}

func (x *ScanImage) GetOriginImageURL() string {
	if x != nil {
		return x.OriginImageURL
	}
	return ""
}

func (x *ScanImage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ScanImage) GetMatchInfo() *ImageMatchTransform {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

type ImageMatchTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the image file whose beam locations this image has been "matched" (aka warped) to
	BeamImageFileName string `protobuf:"bytes,1,opt,name=beamImageFileName,proto3" json:"beamImageFileName,omitempty"`
	// The transform to allow rendering the image relative to the existing beam locations
	XOffset float32 `protobuf:"fixed32,2,opt,name=xOffset,proto3" json:"xOffset,omitempty"`
	YOffset float32 `protobuf:"fixed32,3,opt,name=yOffset,proto3" json:"yOffset,omitempty"`
	XScale  float32 `protobuf:"fixed32,4,opt,name=xScale,proto3" json:"xScale,omitempty"`
	YScale  float32 `protobuf:"fixed32,5,opt,name=yScale,proto3" json:"yScale,omitempty"`
}

func (x *ImageMatchTransform) Reset() {
	*x = ImageMatchTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMatchTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMatchTransform) ProtoMessage() {}

func (x *ImageMatchTransform) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMatchTransform.ProtoReflect.Descriptor instead.
func (*ImageMatchTransform) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{1}
}

func (x *ImageMatchTransform) GetBeamImageFileName() string {
	if x != nil {
		return x.BeamImageFileName
	}
	return ""
}

func (x *ImageMatchTransform) GetXOffset() float32 {
	if x != nil {
		return x.XOffset
	}
	return 0
}

func (x *ImageMatchTransform) GetYOffset() float32 {
	if x != nil {
		return x.YOffset
	}
	return 0
}

func (x *ImageMatchTransform) GetXScale() float32 {
	if x != nil {
		return x.XScale
	}
	return 0
}

func (x *ImageMatchTransform) GetYScale() float32 {
	if x != nil {
		return x.YScale
	}
	return 0
}

type ScanImageDefaultDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanId               string `protobuf:"bytes,1,opt,name=scanId,proto3" json:"scanId,omitempty" bson:"_id,omitempty"`  
	DefaultImageFileName string `protobuf:"bytes,2,opt,name=defaultImageFileName,proto3" json:"defaultImageFileName,omitempty"`
}

func (x *ScanImageDefaultDB) Reset() {
	*x = ScanImageDefaultDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanImageDefaultDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanImageDefaultDB) ProtoMessage() {}

func (x *ScanImageDefaultDB) ProtoReflect() protoreflect.Message {
	mi := &file_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanImageDefaultDB.ProtoReflect.Descriptor instead.
func (*ScanImageDefaultDB) Descriptor() ([]byte, []int) {
	return file_image_proto_rawDescGZIP(), []int{2}
}

func (x *ScanImageDefaultDB) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

func (x *ScanImageDefaultDB) GetDefaultImageFileName() string {
	if x != nil {
		return x.DefaultImageFileName
	}
	return ""
}

var File_image_proto protoreflect.FileDescriptor

var file_image_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x03,
	0x0a, 0x09, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x65,
	0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x65, 0x61, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x78, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x78, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x78, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x12,
	0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x43,
	0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x50, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x50, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x50,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_image_proto_rawDescOnce sync.Once
	file_image_proto_rawDescData = file_image_proto_rawDesc
)

func file_image_proto_rawDescGZIP() []byte {
	file_image_proto_rawDescOnce.Do(func() {
		file_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_image_proto_rawDescData)
	})
	return file_image_proto_rawDescData
}

var file_image_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_image_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_image_proto_goTypes = []interface{}{
	(ScanImageSource)(0),        // 0: ScanImageSource
	(ScanImagePurpose)(0),       // 1: ScanImagePurpose
	(*ScanImage)(nil),           // 2: ScanImage
	(*ImageMatchTransform)(nil), // 3: ImageMatchTransform
	(*ScanImageDefaultDB)(nil),  // 4: ScanImageDefaultDB
}
var file_image_proto_depIdxs = []int32{
	0, // 0: ScanImage.source:type_name -> ScanImageSource
	1, // 1: ScanImage.purpose:type_name -> ScanImagePurpose
	3, // 2: ScanImage.matchInfo:type_name -> ImageMatchTransform
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_image_proto_init() }
func file_image_proto_init() {
	if File_image_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_image_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMatchTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_image_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanImageDefaultDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_image_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_image_proto_goTypes,
		DependencyIndexes: file_image_proto_depIdxs,
		EnumInfos:         file_image_proto_enumTypes,
		MessageInfos:      file_image_proto_msgTypes,
	}.Build()
	File_image_proto = out.File
	file_image_proto_rawDesc = nil
	file_image_proto_goTypes = nil
	file_image_proto_depIdxs = nil
}
